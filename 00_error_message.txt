Thread 6: EXC_BAD_INSTRUCTION (code=1, subcode=0xd53be053)
Line 329: ->  0x1014e7f30 <+1308>: mrs    x19, CNTVCT_EL0

`tensorflow::(anonymous namespace)::ExecutorState::Process:
    0x1014e7a14 <+0>:    stp    x28, x27, [sp, #-0x60]!
    0x1014e7a18 <+4>:    stp    x26, x25, [sp, #0x10]
    0x1014e7a1c <+8>:    stp    x24, x23, [sp, #0x20]
    0x1014e7a20 <+12>:   stp    x22, x21, [sp, #0x30]
    0x1014e7a24 <+16>:   stp    x20, x19, [sp, #0x40]
    0x1014e7a28 <+20>:   stp    x29, x30, [sp, #0x50]
    0x1014e7a2c <+24>:   add    x29, sp, #0x50            ; =0x50 
    0x1014e7a30 <+28>:   sub    sp, sp, #0xa10            ; =0xa10 
    0x1014e7a34 <+32>:   str    x2, [sp, #0x58]
    0x1014e7a38 <+36>:   mov    x27, x1
    0x1014e7a3c <+40>:   mov    x25, x0
    0x1014e7a40 <+44>:   adrp   x8, 9848
    0x1014e7a44 <+48>:   ldr    x8, [x8, #0x5a0]
    0x1014e7a48 <+52>:   ldr    x8, [x8]
    0x1014e7a4c <+56>:   stur   x8, [x29, #-0x68]
    0x1014e7a50 <+60>:   adrp   x1, 9629
    0x1014e7a54 <+64>:   add    x1, x1, #0x4c9            ; =0x4c9 
    0x1014e7a58 <+68>:   mov    w2, #0x64f
    0x1014e7a5c <+72>:   add    x0, sp, #0x6e0            ; =0x6e0 
    0x1014e7a60 <+76>:   mov    w3, #0x0
    0x1014e7a64 <+80>:   bl     0x1017a5b1c               ; tensorflow::internal::LogMessage::LogMessage(char const*, int, int)
    0x1014e7a68 <+84>:   adrp   x1, 9629
    0x1014e7a6c <+88>:   add    x1, x1, #0x5a8            ; =0x5a8 
    0x1014e7a70 <+92>:   add    x0, sp, #0x6e0            ; =0x6e0 
    0x1014e7a74 <+96>:   orr    w2, wzr, #0x18
    0x1014e7a78 <+100>:  bl     0x1032b9e20               ; std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long)
    0x1014e7a7c <+104>:  add    x0, sp, #0x6e0            ; =0x6e0 
    0x1014e7a80 <+108>:  bl     0x1017a5ce4               ; tensorflow::internal::LogMessage::~LogMessage()
    0x1014e7a84 <+112>:  ldr    x28, [x25, #0x98]
    0x1014e7a88 <+116>:  str    xzr, [sp, #0x8f0]
    0x1014e7a8c <+120>:  str    xzr, [sp, #0x6e0]
    0x1014e7a90 <+124>:  str    wzr, [sp, #0x8e8]
    0x1014e7a94 <+128>:  str    xzr, [sp, #0x698]
    0x1014e7a98 <+132>:  str    xzr, [sp, #0x670]
    0x1014e7a9c <+136>:  str    xzr, [sp, #0x648]
    0x1014e7aa0 <+140>:  strb   wzr, [sp, #0x532]
    0x1014e7aa4 <+144>:  strh   wzr, [sp, #0x530]
    0x1014e7aa8 <+148>:  str    xzr, [sp, #0x528]
    0x1014e7aac <+152>:  movi.16b v0, #0x0
    0x1014e7ab0 <+156>:  add    x8, sp, #0x419            ; =0x419 
    0x1014e7ab4 <+160>:  stur   q0, [x8, #0xff]
    0x1014e7ab8 <+164>:  str    q0, [sp, #0x570]
    0x1014e7abc <+168>:  str    q0, [sp, #0x540]
    0x1014e7ac0 <+172>:  str    xzr, [sp, #0x538]
    0x1014e7ac4 <+176>:  str    q0, [sp, #0x590]
    0x1014e7ac8 <+180>:  str    q0, [sp, #0x580]
    0x1014e7acc <+184>:  strb   wzr, [sp, #0x5a0]
    0x1014e7ad0 <+188>:  str    q0, [sp, #0x5b0]
    0x1014e7ad4 <+192>:  str    xzr, [sp, #0x5a8]
    0x1014e7ad8 <+196>:  mov    x8, #-0x1
    0x1014e7adc <+200>:  str    x8, [sp, #0x5c8]
    0x1014e7ae0 <+204>:  str    x8, [sp, #0x5c0]
    0x1014e7ae4 <+208>:  add    x19, sp, #0x510           ; =0x510 
    0x1014e7ae8 <+212>:  add    x23, x19, #0xf8           ; =0xf8 
    0x1014e7aec <+216>:  str    xzr, [sp, #0x600]
    0x1014e7af0 <+220>:  str    q0, [sp, #0x5f0]
    0x1014e7af4 <+224>:  str    q0, [sp, #0x5e0]
    0x1014e7af8 <+228>:  adrp   x8, 9832
    0x1014e7afc <+232>:  ldr    x8, [x8, #0x178]
    0x1014e7b00 <+236>:  str    q0, [sp, #0x5d0]
    0x1014e7b04 <+240>:  add    x8, x8, #0x10             ; =0x10 
    0x1014e7b08 <+244>:  str    x23, [sp, #0x620]
    0x1014e7b0c <+248>:  str    x8, [sp, #0x608]
    0x1014e7b10 <+252>:  adrp   x8, 9832
    0x1014e7b14 <+256>:  ldr    x8, [x8, #0x170]
    0x1014e7b18 <+260>:  add    x21, x19, #0x118          ; =0x118 
    0x1014e7b1c <+264>:  add    x8, x8, #0x10             ; =0x10 
    0x1014e7b20 <+268>:  str    x21, [sp, #0x640]
    0x1014e7b24 <+272>:  str    x8, [sp, #0x628]
    0x1014e7b28 <+276>:  ldr    x8, [x25, #0x20]
    0x1014e7b2c <+280>:  str    x8, [sp, #0x510]
    0x1014e7b30 <+284>:  ldr    x20, [x28, #0x8]
    0x1014e7b34 <+288>:  str    x20, [sp, #0x520]
    0x1014e7b38 <+292>:  ldrb   w8, [x25, #0x19]
    0x1014e7b3c <+296>:  strb   w8, [sp, #0x531]
    0x1014e7b40 <+300>:  ldrb   w8, [x28, #0x98]
    0x1014e7b44 <+304>:  strb   w8, [sp, #0x532]
    0x1014e7b48 <+308>:  ldur   q0, [x25, #0x28]
    0x1014e7b4c <+312>:  str    q0, [sp, #0x550]
    0x1014e7b50 <+316>:  ldur   q0, [x25, #0x38]
    0x1014e7b54 <+320>:  str    q0, [sp, #0x560]
    0x1014e7b58 <+324>:  add    x1, x25, #0x48            ; =0x48 
    0x1014e7b5c <+328>:  add    x0, x19, #0x60            ; =0x60 
    0x1014e7b60 <+332>:  str    x0, [sp, #0x50]
    0x1014e7b64 <+336>:  bl     0x10345fc08               ; symbol stub for: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
    0x1014e7b68 <+340>:  ldr    x8, [x25, #0x60]
    0x1014e7b6c <+344>:  str    x8, [sp, #0x588]
    0x1014e7b70 <+348>:  ldr    x8, [x25, #0xa0]
    0x1014e7b74 <+352>:  str    x8, [sp, #0x590]
    0x1014e7b78 <+356>:  ldr    x8, [x25, #0x90]
    0x1014e7b7c <+360>:  str    x8, [sp, #0x5d0]
    0x1014e7b80 <+364>:  ldr    x8, [x25, #0x98]
    0x1014e7b84 <+368>:  ldr    x8, [x8, #0x10]
    0x1014e7b88 <+372>:  str    x8, [sp, #0x5d8]
    0x1014e7b8c <+376>:  ldr    x8, [x20]
    0x1014e7b90 <+380>:  ldr    x8, [x8, #0xe8]
    0x1014e7b94 <+384>:  str    x20, [sp, #0x60]
    0x1014e7b98 <+388>:  mov    x0, x20
    0x1014e7b9c <+392>:  blr    x8
    0x1014e7ba0 <+396>:  str    x0, [sp, #0x540]
    0x1014e7ba4 <+400>:  ldr    x8, [x25, #0x68]
    0x1014e7ba8 <+404>:  str    x8, [sp, #0x548]
    0x1014e7bac <+408>:  ldr    x8, [x25, #0x88]
    0x1014e7bb0 <+412>:  add    x9, sp, #0x698            ; =0x698 
    0x1014e7bb4 <+416>:  str    x9, [sp, #0x598]
    0x1014e7bb8 <+420>:  add    x9, sp, #0x670            ; =0x670 
    0x1014e7bbc <+424>:  add    x10, sp, #0x648           ; =0x648 
    0x1014e7bc0 <+428>:  str    x9, [sp, #0x5b0]
    0x1014e7bc4 <+432>:  str    x10, [sp, #0x5a8]
    0x1014e7bc8 <+436>:  add    x9, x25, #0xa8            ; =0xa8 
    0x1014e7bcc <+440>:  str    x8, [sp, #0x5f8]
    0x1014e7bd0 <+444>:  str    x9, [sp, #0x5e0]
    0x1014e7bd4 <+448>:  ldr    x8, [x25, #0x70]
    0x1014e7bd8 <+452>:  str    x8, [sp, #0x5e8]
    0x1014e7bdc <+456>:  adrp   x8, 9882
    0x1014e7be0 <+460>:  add    x8, x8, #0x5a8            ; =0x5a8 
    0x1014e7be4 <+464>:  str    x8, [sp, #0x3e8]
    0x1014e7be8 <+468>:  add    x20, sp, #0x3e8           ; =0x3e8 
    0x1014e7bec <+472>:  str    x20, [sp, #0x400]
    0x1014e7bf0 <+476>:  str    x25, [sp, #0x3f0]
    0x1014e7bf4 <+480>:  add    x0, sp, #0x3e8            ; =0x3e8 
    0x1014e7bf8 <+484>:  mov    x1, x23
    0x1014e7bfc <+488>:  bl     0x101456848               ; std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()>::swap(std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()>&)
    0x1014e7c00 <+492>:  ldr    x0, [sp, #0x400]
    0x1014e7c04 <+496>:  cmp    x20, x0
    0x1014e7c08 <+500>:  b.eq   0x1014e7c1c               ; <+520>
    0x1014e7c0c <+504>:  cbz    x0, 0x1014e7c28           ; <+532>
    0x1014e7c10 <+508>:  ldr    x8, [x0]
    0x1014e7c14 <+512>:  ldr    x8, [x8, #0x28]
    0x1014e7c18 <+516>:  b      0x1014e7c24               ; <+528>
    0x1014e7c1c <+520>:  ldr    x8, [x0]
    0x1014e7c20 <+524>:  ldr    x8, [x8, #0x20]
    0x1014e7c24 <+528>:  blr    x8
    0x1014e7c28 <+532>:  adrp   x8, 9882
    0x1014e7c2c <+536>:  add    x8, x8, #0x628            ; =0x628 
    0x1014e7c30 <+540>:  str    x8, [sp, #0x3e8]
    0x1014e7c34 <+544>:  add    x20, sp, #0x3e8           ; =0x3e8 
    0x1014e7c38 <+548>:  str    x20, [sp, #0x400]
    0x1014e7c3c <+552>:  str    x25, [sp, #0x3f0]
    0x1014e7c40 <+556>:  add    x0, sp, #0x3e8            ; =0x3e8 
    0x1014e7c44 <+560>:  mov    x1, x21
    0x1014e7c48 <+564>:  bl     0x101456848               ; std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()>::swap(std::__1::function<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > ()>&)
    0x1014e7c4c <+568>:  ldr    x0, [sp, #0x400]
    0x1014e7c50 <+572>:  cmp    x20, x0
    0x1014e7c54 <+576>:  b.eq   0x1014e7c68               ; <+596>
    0x1014e7c58 <+580>:  cbz    x0, 0x1014e7c74           ; <+608>
    0x1014e7c5c <+584>:  ldr    x8, [x0]
    0x1014e7c60 <+588>:  ldr    x8, [x8, #0x28]
    0x1014e7c64 <+592>:  b      0x1014e7c70               ; <+604>
    0x1014e7c68 <+596>:  ldr    x8, [x0]
    0x1014e7c6c <+600>:  ldr    x8, [x8, #0x20]
    0x1014e7c70 <+604>:  blr    x8
    0x1014e7c74 <+608>:  str    xzr, [sp, #0xe8]
    0x1014e7c78 <+612>:  str    xzr, [sp, #0x3e8]
    0x1014e7c7c <+616>:  ldp    q0, q1, [x27]
    0x1014e7c80 <+620>:  stp    q0, q1, [sp, #0x3c0]
    0x1014e7c84 <+624>:  ldr    x8, [sp, #0x6f0]
    0x1014e7c88 <+628>:  ldr    x20, [sp, #0x6e0]
    0x1014e7c8c <+632>:  lsr    x22, x20, #1
    0x1014e7c90 <+636>:  tst    x20, #0x1
    0x1014e7c94 <+640>:  orr    w9, wzr, #0x10
    0x1014e7c98 <+644>:  csel   x9, x9, x8, eq
    0x1014e7c9c <+648>:  cmp    x22, x9
    0x1014e7ca0 <+652>:  b.eq   0x1014e7cf4               ; <+736>
    0x1014e7ca4 <+656>:  add    x8, x20, #0x2             ; =0x2 
    0x1014e7ca8 <+660>:  tbnz   w20, #0x0, 0x1014e7cc0    ; <+684>
    0x1014e7cac <+664>:  and    x8, x8, #0xfffffffffffffffe
    0x1014e7cb0 <+668>:  str    x8, [sp, #0x6e0]
    0x1014e7cb4 <+672>:  add    x8, sp, #0x6e0            ; =0x6e0 
    0x1014e7cb8 <+676>:  add    x8, x8, #0x8              ; =0x8 
    0x1014e7cbc <+680>:  b      0x1014e7ccc               ; <+696>
    0x1014e7cc0 <+684>:  orr    x8, x8, #0x1
    0x1014e7cc4 <+688>:  str    x8, [sp, #0x6e0]
    0x1014e7cc8 <+692>:  ldr    x8, [sp, #0x6e8]
    0x1014e7ccc <+696>:  add    x8, x8, x22, lsl #5
    0x1014e7cd0 <+700>:  ldp    q1, q0, [sp, #0x3c0]
    0x1014e7cd4 <+704>:  stp    q1, q0, [x8]
    0x1014e7cd8 <+708>:  ldr    x8, [sp, #0x6e0]
    0x1014e7cdc <+712>:  cmp    x8, #0x1                  ; =0x1 
    0x1014e7ce0 <+716>:  b.hi   0x1014e7d78               ; <+868>
    0x1014e7ce4 <+720>:  add    x8, sp, #0x3e8            ; =0x3e8 
    0x1014e7ce8 <+724>:  add    x8, x8, #0x8              ; =0x8 
    0x1014e7cec <+728>:  str    x8, [sp, #0xa0]
    0x1014e7cf0 <+732>:  b      0x1014e94d0               ; <+6844>
    0x1014e7cf4 <+736>:  tbnz   w20, #0x0, 0x1014e7d00    ; <+748>
    0x1014e7cf8 <+740>:  orr    w23, wzr, #0x20
    0x1014e7cfc <+744>:  b      0x1014e7d0c               ; <+760>
    0x1014e7d00 <+748>:  ubfx   x9, x8, #58, #5
    0x1014e7d04 <+752>:  cbnz   x9, 0x1014e9674           ; <+7264>
    0x1014e7d08 <+756>:  lsl    x23, x8, #1
    0x1014e7d0c <+760>:  lsl    x0, x23, #5
    0x1014e7d10 <+764>:  bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e7d14 <+768>:  mov    x21, x0
    0x1014e7d18 <+772>:  add    x8, x0, x22, lsl #5
    0x1014e7d1c <+776>:  ldp    q1, q0, [sp, #0x3c0]
    0x1014e7d20 <+780>:  stp    q1, q0, [x8]
    0x1014e7d24 <+784>:  add    x8, sp, #0x6e0            ; =0x6e0 
    0x1014e7d28 <+788>:  add    x8, x8, #0x8              ; =0x8 
    0x1014e7d2c <+792>:  ldr    x0, [sp, #0x6e8]
    0x1014e7d30 <+796>:  tst    x20, #0x1
    0x1014e7d34 <+800>:  csel   x8, x8, x0, eq
    0x1014e7d38 <+804>:  cbz    x22, 0x1014e7d54          ; <+832>
    0x1014e7d3c <+808>:  lsl    x9, x22, #5
    0x1014e7d40 <+812>:  mov    x10, x21
    0x1014e7d44 <+816>:  ldp    q0, q1, [x8], #0x20
    0x1014e7d48 <+820>:  stp    q0, q1, [x10], #0x20
    0x1014e7d4c <+824>:  subs   x9, x9, #0x20             ; =0x20 
    0x1014e7d50 <+828>:  b.ne   0x1014e7d44               ; <+816>
    0x1014e7d54 <+832>:  tbz    w20, #0x0, 0x1014e7d5c    ; <+840>
    0x1014e7d58 <+836>:  bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e7d5c <+840>:  str    x23, [sp, #0x6f0]
    0x1014e7d60 <+844>:  str    x21, [sp, #0x6e8]
    0x1014e7d64 <+848>:  add    x8, x20, #0x2             ; =0x2 
    0x1014e7d68 <+852>:  orr    x8, x8, #0x1
    0x1014e7d6c <+856>:  str    x8, [sp, #0x6e0]
    0x1014e7d70 <+860>:  cmp    x8, #0x1                  ; =0x1 
    0x1014e7d74 <+864>:  b.ls   0x1014e7ce4               ; <+720>
    0x1014e7d78 <+868>:  str    wzr, [sp, #0x74]
    0x1014e7d7c <+872>:  add    x9, x19, #0x78            ; =0x78 
    0x1014e7d80 <+876>:  str    x9, [sp, #0x48]
    0x1014e7d84 <+880>:  add    x9, sp, #0x6e0            ; =0x6e0 
    0x1014e7d88 <+884>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7d8c <+888>:  str    x9, [sp, #0x98]
    0x1014e7d90 <+892>:  add    x9, sp, #0x3e8            ; =0x3e8 
    0x1014e7d94 <+896>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7d98 <+900>:  str    x9, [sp, #0xa0]
    0x1014e7d9c <+904>:  add    x9, sp, #0x670            ; =0x670 
    0x1014e7da0 <+908>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7da4 <+912>:  str    x9, [sp, #0xc0]
    0x1014e7da8 <+916>:  add    x9, sp, #0x648            ; =0x648 
    0x1014e7dac <+920>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7db0 <+924>:  str    x9, [sp, #0xb8]
    0x1014e7db4 <+928>:  add    x9, sp, #0x698            ; =0x698 
    0x1014e7db8 <+932>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7dbc <+936>:  str    x9, [sp, #0xd0]
    0x1014e7dc0 <+940>:  add    x9, sp, #0x228            ; =0x228 
    0x1014e7dc4 <+944>:  add    x9, x9, #0x10             ; =0x10 
    0x1014e7dc8 <+948>:  str    x9, [sp, #0x20]
    0x1014e7dcc <+952>:  add    x9, sp, #0x110            ; =0x110 
    0x1014e7dd0 <+956>:  add    x9, x9, #0x8              ; =0x8 
    0x1014e7dd4 <+960>:  str    x9, [sp, #0x8]
    0x1014e7dd8 <+964>:  add    x9, sp, #0x510            ; =0x510 
    0x1014e7ddc <+968>:  add    x10, x9, #0xf8            ; =0xf8 
    0x1014e7de0 <+972>:  str    x10, [sp, #0x40]
    0x1014e7de4 <+976>:  add    x10, sp, #0x258           ; =0x258 
    0x1014e7de8 <+980>:  add    x11, x10, #0x18           ; =0x18 
    0x1014e7dec <+984>:  add    x10, x10, #0xb8           ; =0xb8 
    0x1014e7df0 <+988>:  stp    x10, x11, [sp, #0x28]
    0x1014e7df4 <+992>:  add    x9, x9, #0x118            ; =0x118 
    0x1014e7df8 <+996>:  str    x9, [sp, #0x38]
    0x1014e7dfc <+1000>: orr    w9, wzr, #0x4
    0x1014e7e00 <+1004>: dup.2d v0, x9
    0x1014e7e04 <+1008>: adrp   x9, 9626
    0x1014e7e08 <+1012>: add    x9, x9, #0xb8             ; =0xb8 
    0x1014e7e0c <+1016>: mov.d  v0[0], x9
    0x1014e7e10 <+1020>: str    q0, [sp, #0x10]
    0x1014e7e14 <+1024>: stp    x27, x25, [sp, #0x78]
    0x1014e7e18 <+1028>: str    x28, [sp, #0x68]
    0x1014e7e1c <+1032>: b      0x1014e8cac               ; <+4760>
    0x1014e7e20 <+1036>: ldr    x21, [sp, #0xd8]
    0x1014e7e24 <+1040>: ldr    x23, [x21, #0x8]
    0x1014e7e28 <+1044>: str    x23, [sp, #0x518]
    0x1014e7e2c <+1048>: ldp    x8, x9, [sp, #0x88]
    0x1014e7e30 <+1052>: ldr    x8, [x8, #0x20]
    0x1014e7e34 <+1056>: str    x9, [sp, #0x5c8]
    0x1014e7e38 <+1060>: str    x8, [sp, #0x5c0]
    0x1014e7e3c <+1064>: ldr    w8, [sp, #0xb0]
    0x1014e7e40 <+1068>: strb   w8, [sp, #0x5a0]
    0x1014e7e44 <+1072>: ldr    x8, [x21, #0x20]
    0x1014e7e48 <+1076>: orr    w9, wzr, #0xc
    0x1014e7e4c <+1080>: madd   x8, x8, x9, x21
    0x1014e7e50 <+1084>: add    x8, x8, #0x30             ; =0x30 
    0x1014e7e54 <+1088>: str    x8, [sp, #0x538]
    0x1014e7e58 <+1092>: ldrsw  x2, [x21, #0x18]
    0x1014e7e5c <+1096>: add    x8, x8, x2, lsl #3
    0x1014e7e60 <+1100>: str    x8, [sp, #0x600]
    0x1014e7e64 <+1104>: ldrb   w8, [x21, #0x10]
    0x1014e7e68 <+1108>: tbnz   w8, #0x0, 0x1014e8030     ; <+1564>
    0x1014e7e6c <+1112>: add    x0, sp, #0x258            ; =0x258 
    0x1014e7e70 <+1116>: add    x1, sp, #0x510            ; =0x510 
    0x1014e7e74 <+1120>: bl     0x1015a9a8c               ; tensorflow::OpKernelContext::OpKernelContext(tensorflow::OpKernelContext::Params*, int)
    0x1014e7e78 <+1124>: ldr    x0, [sp, #0xa8]
    0x1014e7e7c <+1128>: cbz    x0, 0x1014e7e8c           ; <+1144>
    0x1014e7e80 <+1132>: ldr    x8, [x0]
    0x1014e7e84 <+1136>: ldr    x8, [x8, #0x20]
    0x1014e7e88 <+1140>: blr    x8
    0x1014e7e8c <+1144>: ldr    x8, [x25, #0x78]
    0x1014e7e90 <+1148>: cbnz   x8, 0x1014e8914           ; <+3840>
    0x1014e7e94 <+1152>: ldrb   w19, [x25, #0xc9]
    0x1014e7e98 <+1156>: bl     0x1017b79fc               ; tensorflow::tracing::GetTraceCollector()
    0x1014e7e9c <+1160>: cbz    w19, 0x1014e7eb4          ; <+1184>
    0x1014e7ea0 <+1164>: cbz    x0, 0x1014e7eb4           ; <+1184>
    0x1014e7ea4 <+1168>: ldr    x8, [x0]
    0x1014e7ea8 <+1172>: ldr    x8, [x8, #0x18]
    0x1014e7eac <+1176>: blr    x8
    0x1014e7eb0 <+1180>: tbnz   w0, #0x0, 0x1014e8914     ; <+3840>
    0x1014e7eb4 <+1184>: ldr    x0, [x21, #0x8]
    0x1014e7eb8 <+1188>: ldr    x8, [x0]
    0x1014e7ebc <+1192>: ldr    x8, [x8, #0x28]
    0x1014e7ec0 <+1196>: blr    x8
    0x1014e7ec4 <+1200>: cmp    w0, #0x0                  ; =0x0 
    0x1014e7ec8 <+1204>: orr    w8, wzr, #0x2
    0x1014e7ecc <+1208>: cinc   w8, w8, eq
    0x1014e7ed0 <+1212>: adrp   x9, 10236
    0x1014e7ed4 <+1216>: add    x9, x9, #0xd58            ; =0xd58 
    0x1014e7ed8 <+1220>: ldar   w9, [x9]
    0x1014e7edc <+1224>: cmp    w9, w8
    0x1014e7ee0 <+1228>: b.ge   0x1014e8914               ; <+3840>
    0x1014e7ee4 <+1232>: ldr    x8, [x23]
    0x1014e7ee8 <+1236>: ldr    x8, [x8, #0x28]
    0x1014e7eec <+1240>: mov    x0, x23
    0x1014e7ef0 <+1244>: blr    x8
    0x1014e7ef4 <+1248>: cbz    w0, 0x1014e827c           ; <+2152>
    0x1014e7ef8 <+1252>: mov    w2, #0x72a
    0x1014e7efc <+1256>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f00 <+1260>: mov    w3, #0x0
    0x1014e7f04 <+1264>: adrp   x20, 9629
    0x1014e7f08 <+1268>: add    x20, x20, #0x4c9          ; =0x4c9 
    0x1014e7f0c <+1272>: mov    x1, x20
    0x1014e7f10 <+1276>: bl     0x1017a5b1c               ; tensorflow::internal::LogMessage::LogMessage(char const*, int, int)
    0x1014e7f14 <+1280>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f18 <+1284>: mov    w2, #0x1b
    0x1014e7f1c <+1288>: adrp   x1, 9629
    0x1014e7f20 <+1292>: add    x1, x1, #0x5c1            ; =0x5c1 
    0x1014e7f24 <+1296>: bl     0x1032b9e20               ; std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long)
    0x1014e7f28 <+1300>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f2c <+1304>: bl     0x1017a5ce4               ; tensorflow::internal::LogMessage::~LogMessage()
->  0x1014e7f30 <+1308>: mrs    x19, CNTVCT_EL0
    0x1014e7f34 <+1312>: mov    w2, #0x72c
    0x1014e7f38 <+1316>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f3c <+1320>: mov    w3, #0x0
    0x1014e7f40 <+1324>: mov    x1, x20
    0x1014e7f44 <+1328>: bl     0x1017a5b1c               ; tensorflow::internal::LogMessage::LogMessage(char const*, int, int)
    0x1014e7f48 <+1332>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f4c <+1336>: mov    w2, #0x1a
    0x1014e7f50 <+1340>: adrp   x1, 9629
    0x1014e7f54 <+1344>: add    x1, x1, #0x5dd            ; =0x5dd 
    0x1014e7f58 <+1348>: bl     0x1032b9e20               ; std::__1::basic_ostream<char, std::__1::char_traits<char> >& std::__1::__put_character_sequence<char, std::__1::char_traits<char> >(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, char const*, unsigned long)
    0x1014e7f5c <+1352>: add    x0, sp, #0x110            ; =0x110 
    0x1014e7f60 <+1356>: bl     0x1017a5ce4               ; tensorflow::internal::LogMessage::~LogMessage()
    0x1014e7f64 <+1360>: ldr    x0, [sp, #0x60]
    0x1014e7f68 <+1364>: ldr    x8, [x0]
    0x1014e7f6c <+1368>: ldr    x8, [x8, #0x98]
    0x1014e7f70 <+1372>: add    x2, sp, #0x258            ; =0x258 
    0x1014e7f74 <+1376>: mov    x1, x23
    0x1014e7f78 <+1380>: blr    x8
    0x1014e7f7c <+1384>: mrs    x8, CNTVCT_EL0
    0x1014e7f80 <+1388>: sub    x8, x8, x19
    0x1014e7f84 <+1392>: ldr    x9, [x23, #0xf8]
    0x1014e7f88 <+1396>: add    x9, x9, x9, lsl #3
    0x1014e7f8c <+1400>: mov    x10, #-0x3333333333333334
    0x1014e7f90 <+1404>: movk   x10, #0xcccd
    0x1014e7f94 <+1408>: umulh  x9, x9, x10
    0x1014e7f98 <+1412>: lsr    x9, x9, #3
    0x1014e7f9c <+1416>: umulh  x8, x8, x10
    0x1014e7fa0 <+1420>: add    x8, x9, x8, lsr #3
    0x1014e7fa4 <+1424>: str    x8, [x23, #0xf8]
    0x1014e7fa8 <+1428>: b      0x1014e8294               ; <+2176>
    0x1014e7fac <+1432>: ldr    x8, [x0]
    0x1014e7fb0 <+1436>: ldr    x8, [x8, #0x10]
    0x1014e7fb4 <+1440>: mov    x1, x23
    0x1014e7fb8 <+1444>: blr    x8
    0x1014e7fbc <+1448>: mov    x19, x0
    0x1014e7fc0 <+1452>: cbz    x0, 0x1014e80d0           ; <+1724>
    0x1014e7fc4 <+1456>: ldr    x8, [x19]
    0x1014e7fc8 <+1460>: ldr    x8, [x8, #0x38]
    0x1014e7fcc <+1464>: mov    x0, x19
    0x1014e7fd0 <+1468>: blr    x8
    0x1014e7fd4 <+1472>: strb   w0, [sp, #0x530]
    0x1014e7fd8 <+1476>: ldr    x8, [sp, #0x58]
    0x1014e7fdc <+1480>: mov    w9, #0x3e8
    0x1014e7fe0 <+1484>: mul    x1, x8, x9
    0x1014e7fe4 <+1488>: ldr    x8, [x19]
    0x1014e7fe8 <+1492>: ldr    x8, [x8, #0x58]
    0x1014e7fec <+1496>: mov    x0, x19
    0x1014e7ff0 <+1500>: blr    x8
    0x1014e7ff4 <+1504>: ldr    x8, [x19]
    0x1014e7ff8 <+1508>: ldr    x8, [x8, #0x18]
    0x1014e7ffc <+1512>: mov    x0, x19
    0x1014e8000 <+1516>: blr    x8
    0x1014e8004 <+1520>: b      0x1014e8d98               ; <+4996>
    0x1014e8008 <+1524>: add    x1, sp, #0xe8             ; =0xe8 
    0x1014e800c <+1528>: add    x2, sp, #0x8f0            ; =0x8f0 
    0x1014e8010 <+1532>: add    x4, sp, #0x6e0            ; =0x6e0 
    0x1014e8014 <+1536>: mov    x0, x25
    0x1014e8018 <+1540>: mov    x3, #0x0
    0x1014e801c <+1544>: bl     0x1014e99ec               ; tensorflow::(anonymous namespace)::ExecutorState::NodeDone(tensorflow::Status const&, tensorflow::Node const*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, 8ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode> > const&, tensorflow::NodeExecStatsInterface*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNodeReadyQueue*)
    0x1014e8020 <+1548>: str    w0, [sp, #0x74]
    0x1014e8024 <+1552>: ldrb   w8, [sp, #0x398]
    0x1014e8028 <+1556>: tbz    w8, #0x0, 0x1014e9480     ; <+6764>
    0x1014e802c <+1560>: b      0x1014e9478               ; <+6756>
    0x1014e8030 <+1564>: ldr    x0, [x21, #0x8]
    0x1014e8034 <+1568>: ldr    x8, [x0]
    0x1014e8038 <+1572>: ldr    x8, [x8, #0x18]
    0x1014e803c <+1576>: blr    x8
    0x1014e8040 <+1580>: mov    x28, x0
    0x1014e8044 <+1584>: mov    w0, #0x328
    0x1014e8048 <+1588>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e804c <+1592>: mov    x23, x0
    0x1014e8050 <+1596>: ldr    x19, [sp, #0x598]
    0x1014e8054 <+1600>: str    xzr, [x0]
    0x1014e8058 <+1604>: ldr    x9, [x19]
    0x1014e805c <+1608>: lsr    x10, x9, #1
    0x1014e8060 <+1612>: cmp    x9, #0xa                  ; =0xa 
    0x1014e8064 <+1616>: b.lo   0x1014e80d8               ; <+1732>
    0x1014e8068 <+1620>: cmp    x10, #0x4                 ; =0x4 
    0x1014e806c <+1624>: orr    w8, wzr, #0x4
    0x1014e8070 <+1628>: csel   x8, x10, x8, hi
    0x1014e8074 <+1632>: orr    w9, wzr, #0x4
    0x1014e8078 <+1636>: mov    x20, x9
    0x1014e807c <+1640>: lsl    x9, x9, #1
    0x1014e8080 <+1644>: cmp    x20, x8
    0x1014e8084 <+1648>: b.lo   0x1014e8078               ; <+1636>
    0x1014e8088 <+1652>: lsr    x8, x20, #60
    0x1014e808c <+1656>: cbnz   x8, 0x1014e9674           ; <+7264>
    0x1014e8090 <+1660>: lsl    x0, x20, #4
    0x1014e8094 <+1664>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e8098 <+1668>: mov    w11, #0x0
    0x1014e809c <+1672>: orr    w8, wzr, #0x1
    0x1014e80a0 <+1676>: stp    x8, x0, [x23]
    0x1014e80a4 <+1680>: str    x20, [x23, #0x10]
    0x1014e80a8 <+1684>: ldr    x9, [x19]
    0x1014e80ac <+1688>: lsr    x10, x9, #1
    0x1014e80b0 <+1692>: b      0x1014e80dc               ; <+1736>
    0x1014e80b4 <+1696>: ldr    x25, [sp, #0x80]
    0x1014e80b8 <+1700>: ldr    x28, [sp, #0x68]
    0x1014e80bc <+1704>: ldr    x12, [sp, #0xc8]
    0x1014e80c0 <+1708>: ldp    x1, x21, [sp, #0xe0]
    0x1014e80c4 <+1712>: cmp    x21, x1
    0x1014e80c8 <+1716>: b.ne   0x1014e93e8               ; <+6612>
    0x1014e80cc <+1720>: b      0x1014e93f8               ; <+6628>
    0x1014e80d0 <+1724>: strb   wzr, [sp, #0x530]
    0x1014e80d4 <+1728>: b      0x1014e8d98               ; <+4996>
    0x1014e80d8 <+1732>: orr    w11, wzr, #0x1
    0x1014e80dc <+1736>: mov    x8, x19
    0x1014e80e0 <+1740>: ldr    x12, [x8, #0x8]!
    0x1014e80e4 <+1744>: tst    x9, #0x1
    0x1014e80e8 <+1748>: csel   x8, x8, x12, eq
    0x1014e80ec <+1752>: tbz    w11, #0x0, 0x1014e8118    ; <+1796>
    0x1014e80f0 <+1756>: cbz    x10, 0x1014e8110          ; <+1788>
    0x1014e80f4 <+1760>: add    x9, x23, #0x8             ; =0x8 
    0x1014e80f8 <+1764>: lsl    x10, x10, #4
    0x1014e80fc <+1768>: ldr    q0, [x8], #0x10
    0x1014e8100 <+1772>: str    q0, [x9], #0x10
    0x1014e8104 <+1776>: subs   x10, x10, #0x10           ; =0x10 
    0x1014e8108 <+1780>: b.ne   0x1014e80fc               ; <+1768>
    0x1014e810c <+1784>: ldr    x9, [x19]
    0x1014e8110 <+1788>: and    x8, x9, #0xfffffffffffffffe
    0x1014e8114 <+1792>: b      0x1014e8138               ; <+1828>
    0x1014e8118 <+1796>: cbz    x10, 0x1014e8134          ; <+1824>
    0x1014e811c <+1800>: lsl    x9, x10, #4
    0x1014e8120 <+1804>: ldr    q0, [x8], #0x10
    0x1014e8124 <+1808>: str    q0, [x0], #0x10
    0x1014e8128 <+1812>: subs   x9, x9, #0x10             ; =0x10 
    0x1014e812c <+1816>: b.ne   0x1014e8120               ; <+1804>
    0x1014e8130 <+1820>: ldr    x9, [x19]
    0x1014e8134 <+1824>: orr    x8, x9, #0x1
    0x1014e8138 <+1828>: str    x8, [x23]
    0x1014e813c <+1832>: ldr    x20, [sp, #0x5b0]
    0x1014e8140 <+1836>: mov    x19, x23
    0x1014e8144 <+1840>: str    xzr, [x19, #0x48]!
    0x1014e8148 <+1844>: ldr    x8, [x20]
    0x1014e814c <+1848>: lsr    x12, x8, #1
    0x1014e8150 <+1852>: cmp    x8, #0xa                  ; =0xa 
    0x1014e8154 <+1856>: b.lo   0x1014e81a4               ; <+1936>
    0x1014e8158 <+1860>: cmp    x12, #0x4                 ; =0x4 
    0x1014e815c <+1864>: orr    w8, wzr, #0x4
    0x1014e8160 <+1868>: csel   x8, x12, x8, hi
    0x1014e8164 <+1872>: orr    w9, wzr, #0x4
    0x1014e8168 <+1876>: mov    x21, x9
    0x1014e816c <+1880>: lsl    x9, x9, #1
    0x1014e8170 <+1884>: cmp    x21, x8
    0x1014e8174 <+1888>: b.lo   0x1014e8168               ; <+1876>
    0x1014e8178 <+1892>: lsr    x8, x21, #61
    0x1014e817c <+1896>: cbnz   x8, 0x1014e9674           ; <+7264>
    0x1014e8180 <+1900>: lsl    x0, x21, #3
    0x1014e8184 <+1904>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e8188 <+1908>: mov    w11, #0x0
    0x1014e818c <+1912>: orr    w8, wzr, #0x1
    0x1014e8190 <+1916>: stp    x8, x0, [x23, #0x48]
    0x1014e8194 <+1920>: str    x21, [x23, #0x58]
    0x1014e8198 <+1924>: ldr    x8, [x20]
    0x1014e819c <+1928>: lsr    x12, x8, #1
    0x1014e81a0 <+1932>: b      0x1014e81a8               ; <+1940>
    0x1014e81a4 <+1936>: orr    w11, wzr, #0x1
    0x1014e81a8 <+1940>: ldr    x9, [x20, #0x8]!
    0x1014e81ac <+1944>: tst    x8, #0x1
    0x1014e81b0 <+1948>: csel   x10, x20, x9, eq
    0x1014e81b4 <+1952>: add    x9, x10, x12, lsl #3
    0x1014e81b8 <+1956>: tbz    w11, #0x0, 0x1014e81e4    ; <+2000>
    0x1014e81bc <+1960>: cbz    x12, 0x1014e8564          ; <+2896>
    0x1014e81c0 <+1964>: add    x11, x23, #0x50           ; =0x50 
    0x1014e81c4 <+1968>: lsl    x12, x12, #3
    0x1014e81c8 <+1972>: sub    x12, x12, #0x8            ; =0x8 
    0x1014e81cc <+1976>: lsr    x13, x12, #3
    0x1014e81d0 <+1980>: add    x13, x13, #0x1            ; =0x1 
    0x1014e81d4 <+1984>: cmp    x13, #0x4                 ; =0x4 
    0x1014e81d8 <+1988>: b.hs   0x1014e84c4               ; <+2736>
    0x1014e81dc <+1992>: mov    x12, x10
    0x1014e81e0 <+1996>: b      0x1014e8554               ; <+2880>
    0x1014e81e4 <+2000>: cbz    x12, 0x1014e8274          ; <+2144>
    0x1014e81e8 <+2004>: ldr    x11, [x23, #0x50]
    0x1014e81ec <+2008>: lsl    x12, x12, #3
    0x1014e81f0 <+2012>: sub    x13, x12, #0x8            ; =0x8 
    0x1014e81f4 <+2016>: lsr    x12, x13, #3
    0x1014e81f8 <+2020>: add    x12, x12, #0x1            ; =0x1 
    0x1014e81fc <+2024>: cmp    x12, #0x4                 ; =0x4 
    0x1014e8200 <+2028>: b.lo   0x1014e8264               ; <+2128>
    0x1014e8204 <+2032>: add    x14, x11, x13
    0x1014e8208 <+2036>: add    x14, x14, #0x8            ; =0x8 
    0x1014e820c <+2040>: add    x13, x10, x13
    0x1014e8210 <+2044>: add    x13, x13, #0x8            ; =0x8 
    0x1014e8214 <+2048>: cmp    x11, x13
    0x1014e8218 <+2052>: ccmp   x10, x14, #0x2, lo
    0x1014e821c <+2056>: b.lo   0x1014e8264               ; <+2128>
    0x1014e8220 <+2060>: and    x13, x12, #0x3ffffffffffffffc
    0x1014e8224 <+2064>: lsl    x15, x13, #3
    0x1014e8228 <+2068>: add    x14, x11, x15
    0x1014e822c <+2072>: add    x15, x10, x15
    0x1014e8230 <+2076>: add    x10, x10, #0x10           ; =0x10 
    0x1014e8234 <+2080>: add    x11, x11, #0x10           ; =0x10 
    0x1014e8238 <+2084>: mov    x16, x13
    0x1014e823c <+2088>: ldp    q0, q1, [x10, #-0x10]
    0x1014e8240 <+2092>: stp    q0, q1, [x11, #-0x10]
    0x1014e8244 <+2096>: add    x10, x10, #0x20           ; =0x20 
    0x1014e8248 <+2100>: add    x11, x11, #0x20           ; =0x20 
    0x1014e824c <+2104>: subs   x16, x16, #0x4            ; =0x4 
    0x1014e8250 <+2108>: b.ne   0x1014e823c               ; <+2088>
    0x1014e8254 <+2112>: mov    x11, x14
    0x1014e8258 <+2116>: mov    x10, x15
    0x1014e825c <+2120>: cmp    x12, x13
    0x1014e8260 <+2124>: b.eq   0x1014e8274               ; <+2144>
    0x1014e8264 <+2128>: ldr    x12, [x10], #0x8
    0x1014e8268 <+2132>: str    x12, [x11], #0x8
    0x1014e826c <+2136>: cmp    x9, x10
    0x1014e8270 <+2140>: b.ne   0x1014e8264               ; <+2128>
    0x1014e8274 <+2144>: orr    x8, x8, #0x1
    0x1014e8278 <+2148>: b      0x1014e8568               ; <+2900>
    0x1014e827c <+2152>: ldr    x0, [sp, #0x60]
    0x1014e8280 <+2156>: ldr    x8, [x0]
    0x1014e8284 <+2160>: ldr    x8, [x8, #0x98]
    0x1014e8288 <+2164>: add    x2, sp, #0x258            ; =0x258 
    0x1014e828c <+2168>: mov    x1, x23
    0x1014e8290 <+2172>: blr    x8
    0x1014e8294 <+2176>: ldr    x19, [sp, #0xa8]
    0x1014e8298 <+2180>: cbz    x19, 0x1014e82ac          ; <+2200>
    0x1014e829c <+2184>: ldr    x8, [x19]
    0x1014e82a0 <+2188>: ldr    x8, [x8, #0x28]
    0x1014e82a4 <+2192>: mov    x0, x19
    0x1014e82a8 <+2196>: blr    x8
    0x1014e82ac <+2200>: add    x0, sp, #0x110            ; =0x110 
    0x1014e82b0 <+2204>: add    x3, sp, #0x258            ; =0x258 
    0x1014e82b4 <+2208>: add    x4, sp, #0x3e8            ; =0x3e8 
    0x1014e82b8 <+2212>: mov    x1, x25
    0x1014e82bc <+2216>: mov    x2, x21
    0x1014e82c0 <+2220>: mov    x5, x19
    0x1014e82c4 <+2224>: bl     0x1014e9c4c               ; tensorflow::(anonymous namespace)::ExecutorState::ProcessOutputs(tensorflow::(anonymous namespace)::NodeItem const&, tensorflow::OpKernelContext*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::Entry, 4ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::Entry> >*, tensorflow::NodeExecStatsInterface*)
    0x1014e82c8 <+2228>: ldr    x21, [sp, #0xe8]
    0x1014e82cc <+2232>: ldr    x1, [sp, #0x110]
    0x1014e82d0 <+2236>: cmp    x21, x1
    0x1014e82d4 <+2240>: b.eq   0x1014e82e4               ; <+2256>
    0x1014e82d8 <+2244>: add    x0, sp, #0xe8             ; =0xe8 
    0x1014e82dc <+2248>: bl     0x10178d000               ; tensorflow::Status::SlowCopyFrom(tensorflow::Status::State const*)
    0x1014e82e0 <+2252>: ldr    x21, [sp, #0x110]
    0x1014e82e4 <+2256>: str    xzr, [sp, #0x110]
    0x1014e82e8 <+2260>: cbz    x21, 0x1014e8304          ; <+2288>
    0x1014e82ec <+2264>: ldrsb  w8, [x21, #0x1f]
    0x1014e82f0 <+2268>: tbz    w8, #0x1f, 0x1014e82fc    ; <+2280>
    0x1014e82f4 <+2272>: ldr    x0, [x21, #0x8]
    0x1014e82f8 <+2276>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e82fc <+2280>: mov    x0, x21
    0x1014e8300 <+2284>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8304 <+2288>: ldr    x8, [sp, #0xe8]
    0x1014e8308 <+2292>: cbz    x8, 0x1014e83b4           ; <+2464>
    0x1014e830c <+2296>: mov    x23, #0x0
    0x1014e8310 <+2300>: ldr    x20, [sp, #0xd8]
    0x1014e8314 <+2304>: cbz    x19, 0x1014e832c          ; <+2328>
    0x1014e8318 <+2308>: ldr    x8, [x19]
    0x1014e831c <+2312>: ldr    x8, [x8, #0x40]
    0x1014e8320 <+2316>: add    x1, sp, #0x258            ; =0x258 
    0x1014e8324 <+2320>: mov    x0, x19
    0x1014e8328 <+2324>: blr    x8
    0x1014e832c <+2328>: add    x0, sp, #0x258            ; =0x258 
    0x1014e8330 <+2332>: bl     0x1015a9eec               ; tensorflow::OpKernelContext::~OpKernelContext()
    0x1014e8334 <+2336>: ldr    x8, [sp, #0xc8]
    0x1014e8338 <+2340>: ldr    w19, [x8]
    0x1014e833c <+2344>: cmp    w19, #0x1                 ; =0x1 
    0x1014e8340 <+2348>: b.ge   0x1014e92c0               ; <+6316>
    0x1014e8344 <+2352>: b      0x1014e92e0               ; <+6348>
    0x1014e8348 <+2356>: add    x8, sp, #0x258            ; =0x258 
    0x1014e834c <+2360>: mov    x0, x23
    0x1014e8350 <+2364>: adrp   x1, 9628
    0x1014e8354 <+2368>: add    x1, x1, #0x61a            ; =0x61a 
    0x1014e8358 <+2372>: bl     0x1014ed998               ; tensorflow::Status tensorflow::errors::InvalidArgument<int, char const*>(int, char const*)
    0x1014e835c <+2376>: ldr    x8, [x21, #0x8]
    0x1014e8360 <+2380>: ldr    x1, [x8, #0x8]
    0x1014e8364 <+2384>: add    x0, sp, #0x258            ; =0x258 
    0x1014e8368 <+2388>: add    x8, sp, #0xe0             ; =0xe0 
    0x1014e836c <+2392>: mov    w2, #0x0
    0x1014e8370 <+2396>: bl     0x10158ecfc               ; tensorflow::AttachDef(tensorflow::Status const&, tensorflow::NodeDef const&, bool)
    0x1014e8374 <+2400>: ldr    x21, [sp, #0x258]
    0x1014e8378 <+2404>: str    xzr, [sp, #0x258]
    0x1014e837c <+2408>: ldr    x25, [sp, #0x80]
    0x1014e8380 <+2412>: ldr    x28, [sp, #0x68]
    0x1014e8384 <+2416>: cbz    x21, 0x1014e83a0          ; <+2444>
    0x1014e8388 <+2420>: ldrsb  w8, [x21, #0x1f]
    0x1014e838c <+2424>: tbz    w8, #0x1f, 0x1014e8398    ; <+2436>
    0x1014e8390 <+2428>: ldr    x0, [x21, #0x8]
    0x1014e8394 <+2432>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8398 <+2436>: mov    x0, x21
    0x1014e839c <+2440>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e83a0 <+2444>: ldr    x12, [sp, #0xc8]
    0x1014e83a4 <+2448>: ldp    x1, x21, [sp, #0xe0]
    0x1014e83a8 <+2452>: cmp    x21, x1
    0x1014e83ac <+2456>: b.ne   0x1014e93e8               ; <+6612>
    0x1014e83b0 <+2460>: b      0x1014e93f8               ; <+6628>
    0x1014e83b4 <+2464>: ldr    x8, [x25, #0x98]
    0x1014e83b8 <+2468>: ldrb   w8, [x8, #0x98]
    0x1014e83bc <+2472>: ldr    x20, [sp, #0xd8]
    0x1014e83c0 <+2476>: cbz    w8, 0x1014e84b8           ; <+2724>
    0x1014e83c4 <+2480>: ldr    x8, [sp, #0x268]
    0x1014e83c8 <+2484>: ldrb   w9, [x8, #0x22]
    0x1014e83cc <+2488>: cbz    w9, 0x1014e83f8           ; <+2532>
    0x1014e83d0 <+2492>: ldr    x19, [sp, #0x30]
    0x1014e83d4 <+2496>: mov    x0, x19
    0x1014e83d8 <+2500>: bl     0x1017a6f64               ; tensorflow::mutex::lock()
    0x1014e83dc <+2504>: add    x1, sp, #0x398            ; =0x398 
    0x1014e83e0 <+2508>: ldr    x0, [sp, #0x28]
    0x1014e83e4 <+2512>: bl     0x1015ef5f0               ; tensorflow::UniqueTensorReferences::FreezeAndReturnReferences(absl::InlinedVector<tensorflow::TensorReference, 4ul, std::__1::allocator<tensorflow::TensorReference> >*)
    0x1014e83e8 <+2516>: mov    x0, x19
    0x1014e83ec <+2520>: ldr    x19, [sp, #0xa8]
    0x1014e83f0 <+2524>: bl     0x1017a6f84               ; tensorflow::mutex::unlock()
    0x1014e83f4 <+2528>: ldr    x8, [sp, #0x268]
    0x1014e83f8 <+2532>: ldr    x23, [x8, #0xa8]
    0x1014e83fc <+2536>: cbnz   x23, 0x1014e8314          ; <+2304>
    0x1014e8400 <+2540>: ldr    x0, [x8, #0x10]
    0x1014e8404 <+2544>: ldr    x8, [x0]
    0x1014e8408 <+2548>: ldr    x8, [x8, #0x20]
    0x1014e840c <+2552>: blr    x8
    0x1014e8410 <+2556>: cbz    x0, 0x1014e84b8           ; <+2724>
    0x1014e8414 <+2560>: ldr    x23, [x0, #0x8]
    0x1014e8418 <+2564>: cbnz   x19, 0x1014e8318          ; <+2308>
    0x1014e841c <+2568>: b      0x1014e832c               ; <+2328>
    0x1014e8420 <+2572>: add    x8, sp, #0x258            ; =0x258 
    0x1014e8424 <+2576>: bl     0x1015ee714               ; tensorflow::DataTypeString(tensorflow::DataType)
    0x1014e8428 <+2580>: ldr    x8, [x20]
    0x1014e842c <+2584>: ldrb   w0, [x8, #0xd]
    0x1014e8430 <+2588>: add    x8, sp, #0x110            ; =0x110 
    0x1014e8434 <+2592>: bl     0x1015ee714               ; tensorflow::DataTypeString(tensorflow::DataType)
    0x1014e8438 <+2596>: add    x2, sp, #0x258            ; =0x258 
    0x1014e843c <+2600>: add    x4, sp, #0x110            ; =0x110 
    0x1014e8440 <+2604>: add    x8, sp, #0x228            ; =0x228 
    0x1014e8444 <+2608>: mov    x0, x23
    0x1014e8448 <+2612>: adrp   x1, 9628
    0x1014e844c <+2616>: add    x1, x1, #0x65e            ; =0x65e 
    0x1014e8450 <+2620>: adrp   x3, 9628
    0x1014e8454 <+2624>: add    x3, x3, #0x676            ; =0x676 
    0x1014e8458 <+2628>: bl     0x1014eda6c               ; tensorflow::Status tensorflow::errors::InvalidArgument<int, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >)
    0x1014e845c <+2632>: ldr    x8, [x21, #0x8]
    0x1014e8460 <+2636>: ldr    x1, [x8, #0x8]
    0x1014e8464 <+2640>: add    x0, sp, #0x228            ; =0x228 
    0x1014e8468 <+2644>: add    x8, sp, #0xe0             ; =0xe0 
    0x1014e846c <+2648>: mov    w2, #0x0
    0x1014e8470 <+2652>: bl     0x10158ecfc               ; tensorflow::AttachDef(tensorflow::Status const&, tensorflow::NodeDef const&, bool)
    0x1014e8474 <+2656>: ldr    x21, [sp, #0x228]
    0x1014e8478 <+2660>: str    xzr, [sp, #0x228]
    0x1014e847c <+2664>: ldr    x25, [sp, #0x80]
    0x1014e8480 <+2668>: ldr    x28, [sp, #0x68]
    0x1014e8484 <+2672>: cbz    x21, 0x1014e84a0          ; <+2700>
    0x1014e8488 <+2676>: ldrsb  w8, [x21, #0x1f]
    0x1014e848c <+2680>: tbz    w8, #0x1f, 0x1014e8498    ; <+2692>
    0x1014e8490 <+2684>: ldr    x0, [x21, #0x8]
    0x1014e8494 <+2688>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8498 <+2692>: mov    x0, x21
    0x1014e849c <+2696>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e84a0 <+2700>: ldrsb  w8, [sp, #0x127]
    0x1014e84a4 <+2704>: ldr    x12, [sp, #0xc8]
    0x1014e84a8 <+2708>: tbnz   w8, #0x1f, 0x1014e8520    ; <+2828>
    0x1014e84ac <+2712>: ldrsb  w8, [sp, #0x26f]
    0x1014e84b0 <+2716>: tbz    w8, #0x1f, 0x1014e93dc    ; <+6600>
    0x1014e84b4 <+2720>: b      0x1014e8534               ; <+2848>
    0x1014e84b8 <+2724>: mov    x23, #0x0
    0x1014e84bc <+2728>: cbnz   x19, 0x1014e8318          ; <+2308>
    0x1014e84c0 <+2732>: b      0x1014e832c               ; <+2328>
    0x1014e84c4 <+2736>: add    x14, x23, x12
    0x1014e84c8 <+2740>: add    x14, x14, #0x58           ; =0x58 
    0x1014e84cc <+2744>: add    x12, x10, x12
    0x1014e84d0 <+2748>: add    x12, x12, #0x8            ; =0x8 
    0x1014e84d4 <+2752>: cmp    x11, x12
    0x1014e84d8 <+2756>: ccmp   x14, x10, #0x0, lo
    0x1014e84dc <+2760>: b.hi   0x1014e8550               ; <+2876>
    0x1014e84e0 <+2764>: and    x14, x13, #0x3ffffffffffffffc
    0x1014e84e4 <+2768>: lsl    x12, x14, #3
    0x1014e84e8 <+2772>: add    x11, x11, x12
    0x1014e84ec <+2776>: add    x12, x10, x12
    0x1014e84f0 <+2780>: add    x10, x10, #0x10           ; =0x10 
    0x1014e84f4 <+2784>: add    x15, x23, #0x60           ; =0x60 
    0x1014e84f8 <+2788>: mov    x16, x14
    0x1014e84fc <+2792>: ldp    q0, q1, [x10, #-0x10]
    0x1014e8500 <+2796>: stp    q0, q1, [x15, #-0x10]
    0x1014e8504 <+2800>: add    x10, x10, #0x20           ; =0x20 
    0x1014e8508 <+2804>: add    x15, x15, #0x20           ; =0x20 
    0x1014e850c <+2808>: subs   x16, x16, #0x4            ; =0x4 
    0x1014e8510 <+2812>: b.ne   0x1014e84fc               ; <+2792>
    0x1014e8514 <+2816>: cmp    x13, x14
    0x1014e8518 <+2820>: b.ne   0x1014e8554               ; <+2880>
    0x1014e851c <+2824>: b      0x1014e8564               ; <+2896>
    0x1014e8520 <+2828>: ldr    x0, [sp, #0x110]
    0x1014e8524 <+2832>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8528 <+2836>: ldr    x12, [sp, #0xc8]
    0x1014e852c <+2840>: ldrsb  w8, [sp, #0x26f]
    0x1014e8530 <+2844>: tbz    w8, #0x1f, 0x1014e93dc    ; <+6600>
    0x1014e8534 <+2848>: ldr    x0, [sp, #0x258]
    0x1014e8538 <+2852>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e853c <+2856>: ldr    x12, [sp, #0xc8]
    0x1014e8540 <+2860>: ldp    x1, x21, [sp, #0xe0]
    0x1014e8544 <+2864>: cmp    x21, x1
    0x1014e8548 <+2868>: b.ne   0x1014e93e8               ; <+6612>
    0x1014e854c <+2872>: b      0x1014e93f8               ; <+6628>
    0x1014e8550 <+2876>: mov    x12, x10
    0x1014e8554 <+2880>: ldr    x10, [x12], #0x8
    0x1014e8558 <+2884>: str    x10, [x11], #0x8
    0x1014e855c <+2888>: cmp    x9, x12
    0x1014e8560 <+2892>: b.ne   0x1014e8554               ; <+2880>
    0x1014e8564 <+2896>: and    x8, x8, #0xfffffffffffffffe
    0x1014e8568 <+2900>: str    x8, [x23, #0x48]
    0x1014e856c <+2904>: ldr    x20, [sp, #0x5a8]
    0x1014e8570 <+2908>: mov    x22, x23
    0x1014e8574 <+2912>: str    xzr, [x22, #0x70]!
    0x1014e8578 <+2916>: ldr    x10, [x20]
    0x1014e857c <+2920>: lsr    x11, x10, #1
    0x1014e8580 <+2924>: cmp    x10, #0xa                 ; =0xa 
    0x1014e8584 <+2928>: b.lo   0x1014e85d4               ; <+3008>
    0x1014e8588 <+2932>: cmp    x11, #0x4                 ; =0x4 
    0x1014e858c <+2936>: orr    w8, wzr, #0x4
    0x1014e8590 <+2940>: csel   x8, x11, x8, hi
    0x1014e8594 <+2944>: orr    w9, wzr, #0x4
    0x1014e8598 <+2948>: mov    x21, x9
    0x1014e859c <+2952>: lsl    x9, x9, #1
    0x1014e85a0 <+2956>: cmp    x21, x8
    0x1014e85a4 <+2960>: b.lo   0x1014e8598               ; <+2948>
    0x1014e85a8 <+2964>: lsr    x8, x21, #61
    0x1014e85ac <+2968>: cbnz   x8, 0x1014e9674           ; <+7264>
    0x1014e85b0 <+2972>: lsl    x0, x21, #3
    0x1014e85b4 <+2976>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e85b8 <+2980>: mov    w12, #0x0
    0x1014e85bc <+2984>: orr    w8, wzr, #0x1
    0x1014e85c0 <+2988>: stp    x8, x0, [x23, #0x70]
    0x1014e85c4 <+2992>: str    x21, [x23, #0x80]
    0x1014e85c8 <+2996>: ldr    x10, [x20]
    0x1014e85cc <+3000>: lsr    x11, x10, #1
    0x1014e85d0 <+3004>: b      0x1014e85d8               ; <+3012>
    0x1014e85d4 <+3008>: orr    w12, wzr, #0x1
    0x1014e85d8 <+3012>: mov    x8, x20
    0x1014e85dc <+3016>: ldr    x9, [x8, #0x8]!
    0x1014e85e0 <+3020>: tst    x10, #0x1
    0x1014e85e4 <+3024>: csel   x9, x8, x9, eq
    0x1014e85e8 <+3028>: add    x8, x9, x11, lsl #3
    0x1014e85ec <+3032>: tbz    w12, #0x0, 0x1014e8618    ; <+3076>
    0x1014e85f0 <+3036>: cbz    x11, 0x1014e8728          ; <+3348>
    0x1014e85f4 <+3040>: add    x10, x23, #0x78           ; =0x78 
    0x1014e85f8 <+3044>: lsl    x11, x11, #3
    0x1014e85fc <+3048>: sub    x11, x11, #0x8            ; =0x8 
    0x1014e8600 <+3052>: lsr    x12, x11, #3
    0x1014e8604 <+3056>: add    x12, x12, #0x1            ; =0x1 
    0x1014e8608 <+3060>: cmp    x12, #0x4                 ; =0x4 
    0x1014e860c <+3064>: b.hs   0x1014e86b4               ; <+3232>
    0x1014e8610 <+3068>: mov    x11, x9
    0x1014e8614 <+3072>: b      0x1014e8714               ; <+3328>
    0x1014e8618 <+3076>: cbz    x11, 0x1014e86ac          ; <+3224>
    0x1014e861c <+3080>: ldr    x10, [x23, #0x78]
    0x1014e8620 <+3084>: lsl    x11, x11, #3
    0x1014e8624 <+3088>: sub    x12, x11, #0x8            ; =0x8 
    0x1014e8628 <+3092>: lsr    x11, x12, #3
    0x1014e862c <+3096>: add    x11, x11, #0x1            ; =0x1 
    0x1014e8630 <+3100>: cmp    x11, #0x4                 ; =0x4 
    0x1014e8634 <+3104>: b.lo   0x1014e8698               ; <+3204>
    0x1014e8638 <+3108>: add    x13, x10, x12
    0x1014e863c <+3112>: add    x13, x13, #0x8            ; =0x8 
    0x1014e8640 <+3116>: add    x12, x9, x12
    0x1014e8644 <+3120>: add    x12, x12, #0x8            ; =0x8 
    0x1014e8648 <+3124>: cmp    x10, x12
    0x1014e864c <+3128>: ccmp   x9, x13, #0x2, lo
    0x1014e8650 <+3132>: b.lo   0x1014e8698               ; <+3204>
    0x1014e8654 <+3136>: and    x12, x11, #0x3ffffffffffffffc
    0x1014e8658 <+3140>: lsl    x14, x12, #3
    0x1014e865c <+3144>: add    x13, x10, x14
    0x1014e8660 <+3148>: add    x14, x9, x14
    0x1014e8664 <+3152>: add    x9, x9, #0x10             ; =0x10 
    0x1014e8668 <+3156>: add    x10, x10, #0x10           ; =0x10 
    0x1014e866c <+3160>: mov    x15, x12
    0x1014e8670 <+3164>: ldp    q0, q1, [x9, #-0x10]
    0x1014e8674 <+3168>: stp    q0, q1, [x10, #-0x10]
    0x1014e8678 <+3172>: add    x9, x9, #0x20             ; =0x20 
    0x1014e867c <+3176>: add    x10, x10, #0x20           ; =0x20 
    0x1014e8680 <+3180>: subs   x15, x15, #0x4            ; =0x4 
    0x1014e8684 <+3184>: b.ne   0x1014e8670               ; <+3164>
    0x1014e8688 <+3188>: mov    x10, x13
    0x1014e868c <+3192>: mov    x9, x14
    0x1014e8690 <+3196>: cmp    x11, x12
    0x1014e8694 <+3200>: b.eq   0x1014e86a8               ; <+3220>
    0x1014e8698 <+3204>: ldr    x11, [x9], #0x8
    0x1014e869c <+3208>: str    x11, [x10], #0x8
    0x1014e86a0 <+3212>: cmp    x8, x9
    0x1014e86a4 <+3216>: b.ne   0x1014e8698               ; <+3204>
    0x1014e86a8 <+3220>: ldr    x10, [x20]
    0x1014e86ac <+3224>: orr    x8, x10, #0x1
    0x1014e86b0 <+3228>: b      0x1014e872c               ; <+3352>
    0x1014e86b4 <+3232>: add    x13, x23, x11
    0x1014e86b8 <+3236>: add    x13, x13, #0x80           ; =0x80 
    0x1014e86bc <+3240>: add    x11, x9, x11
    0x1014e86c0 <+3244>: add    x11, x11, #0x8            ; =0x8 
    0x1014e86c4 <+3248>: cmp    x10, x11
    0x1014e86c8 <+3252>: ccmp   x13, x9, #0x0, lo
    0x1014e86cc <+3256>: b.hi   0x1014e8710               ; <+3324>
    0x1014e86d0 <+3260>: and    x13, x12, #0x3ffffffffffffffc
    0x1014e86d4 <+3264>: lsl    x11, x13, #3
    0x1014e86d8 <+3268>: add    x10, x10, x11
    0x1014e86dc <+3272>: add    x11, x9, x11
    0x1014e86e0 <+3276>: add    x9, x9, #0x10             ; =0x10 
    0x1014e86e4 <+3280>: add    x14, x23, #0x88           ; =0x88 
    0x1014e86e8 <+3284>: mov    x15, x13
    0x1014e86ec <+3288>: ldp    q0, q1, [x9, #-0x10]
    0x1014e86f0 <+3292>: stp    q0, q1, [x14, #-0x10]
    0x1014e86f4 <+3296>: add    x9, x9, #0x20             ; =0x20 
    0x1014e86f8 <+3300>: add    x14, x14, #0x20           ; =0x20 
    0x1014e86fc <+3304>: subs   x15, x15, #0x4            ; =0x4 
    0x1014e8700 <+3308>: b.ne   0x1014e86ec               ; <+3288>
    0x1014e8704 <+3312>: cmp    x12, x13
    0x1014e8708 <+3316>: b.ne   0x1014e8714               ; <+3328>
    0x1014e870c <+3320>: b      0x1014e8724               ; <+3344>
    0x1014e8710 <+3324>: mov    x11, x9
    0x1014e8714 <+3328>: ldr    x9, [x11], #0x8
    0x1014e8718 <+3332>: str    x9, [x10], #0x8
    0x1014e871c <+3336>: cmp    x8, x11
    0x1014e8720 <+3340>: b.ne   0x1014e8714               ; <+3328>
    0x1014e8724 <+3344>: ldr    x10, [x20]
    0x1014e8728 <+3348>: and    x8, x10, #0xfffffffffffffffe
    0x1014e872c <+3352>: str    x8, [x23, #0x70]
    0x1014e8730 <+3356>: add    x21, x23, #0x98           ; =0x98 
    0x1014e8734 <+3360>: ldr    q0, [sp, #0x520]
    0x1014e8738 <+3364>: ldr    q1, [sp, #0x510]
    0x1014e873c <+3368>: stur   q0, [x23, #0xa8]
    0x1014e8740 <+3372>: stur   q1, [x23, #0x98]
    0x1014e8744 <+3376>: ldr    q0, [sp, #0x540]
    0x1014e8748 <+3380>: ldr    q1, [sp, #0x530]
    0x1014e874c <+3384>: ldr    q2, [sp, #0x560]
    0x1014e8750 <+3388>: ldr    q3, [sp, #0x550]
    0x1014e8754 <+3392>: stur   q2, [x23, #0xe8]
    0x1014e8758 <+3396>: stur   q3, [x23, #0xd8]
    0x1014e875c <+3400>: stur   q0, [x23, #0xc8]
    0x1014e8760 <+3404>: add    x0, x23, #0xf8            ; =0xf8 
    0x1014e8764 <+3408>: stur   q1, [x23, #0xb8]
    0x1014e8768 <+3412>: ldr    x1, [sp, #0x50]
    0x1014e876c <+3416>: bl     0x10345fbe4               ; symbol stub for: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
    0x1014e8770 <+3420>: ldr    x8, [sp, #0x48]
    0x1014e8774 <+3424>: ldp    q0, q1, [x8]
    0x1014e8778 <+3428>: ldp    q2, q3, [x8, #0x20]
    0x1014e877c <+3432>: stp    q2, q3, [x23, #0x130]
    0x1014e8780 <+3436>: stp    q0, q1, [x23, #0x110]
    0x1014e8784 <+3440>: ldp    q0, q1, [x8, #0x40]
    0x1014e8788 <+3444>: ldp    q2, q3, [x8, #0x60]
    0x1014e878c <+3448>: stp    q2, q3, [x23, #0x170]
    0x1014e8790 <+3452>: stp    q0, q1, [x23, #0x150]
    0x1014e8794 <+3456>: ldr    x0, [sp, #0x620]
    0x1014e8798 <+3460>: cbz    x0, 0x1014e87e0           ; <+3532>
    0x1014e879c <+3464>: ldr    x8, [sp, #0x40]
    0x1014e87a0 <+3468>: cmp    x8, x0
    0x1014e87a4 <+3472>: b.eq   0x1014e87f4               ; <+3552>
    0x1014e87a8 <+3476>: ldr    x8, [x0]
    0x1014e87ac <+3480>: ldr    x8, [x8, #0x10]
    0x1014e87b0 <+3484>: blr    x8
    0x1014e87b4 <+3488>: str    x0, [x23, #0x1a8]
    0x1014e87b8 <+3492>: ldr    x0, [sp, #0x640]
    0x1014e87bc <+3496>: cbz    x0, 0x1014e87ec           ; <+3544>
    0x1014e87c0 <+3500>: ldr    x8, [sp, #0x38]
    0x1014e87c4 <+3504>: cmp    x8, x0
    0x1014e87c8 <+3508>: b.eq   0x1014e8814               ; <+3584>
    0x1014e87cc <+3512>: ldr    x8, [x0]
    0x1014e87d0 <+3516>: ldr    x8, [x8, #0x10]
    0x1014e87d4 <+3520>: blr    x8
    0x1014e87d8 <+3524>: str    x0, [x23, #0x1c8]
    0x1014e87dc <+3528>: b      0x1014e8828               ; <+3604>
    0x1014e87e0 <+3532>: str    xzr, [x23, #0x1a8]
    0x1014e87e4 <+3536>: ldr    x0, [sp, #0x640]
    0x1014e87e8 <+3540>: cbnz   x0, 0x1014e87c0           ; <+3500>
    0x1014e87ec <+3544>: str    xzr, [x23, #0x1c8]
    0x1014e87f0 <+3548>: b      0x1014e8828               ; <+3604>
    0x1014e87f4 <+3552>: add    x1, x23, #0x190           ; =0x190 
    0x1014e87f8 <+3556>: str    x1, [x23, #0x1a8]
    0x1014e87fc <+3560>: ldr    x8, [x0]
    0x1014e8800 <+3564>: ldr    x8, [x8, #0x18]
    0x1014e8804 <+3568>: blr    x8
    0x1014e8808 <+3572>: ldr    x0, [sp, #0x640]
    0x1014e880c <+3576>: cbnz   x0, 0x1014e87c0           ; <+3500>
    0x1014e8810 <+3580>: b      0x1014e87ec               ; <+3544>
    0x1014e8814 <+3584>: add    x1, x23, #0x1b0           ; =0x1b0 
    0x1014e8818 <+3588>: str    x1, [x23, #0x1c8]
    0x1014e881c <+3592>: ldr    x8, [x0]
    0x1014e8820 <+3596>: ldr    x8, [x8, #0x18]
    0x1014e8824 <+3600>: blr    x8
    0x1014e8828 <+3604>: ldr    x8, [sp, #0x78]
    0x1014e882c <+3608>: ldp    q0, q1, [x8]
    0x1014e8830 <+3612>: stp    q0, q1, [x23, #0x1d0]
    0x1014e8834 <+3616>: ldr    x8, [sp, #0xd8]
    0x1014e8838 <+3620>: stp    x8, x26, [x23, #0x1f0]
    0x1014e883c <+3624>: add    x26, x23, #0x200          ; =0x200 
    0x1014e8840 <+3628>: str    xzr, [x23, #0xb0]
    0x1014e8844 <+3632>: ldr    w2, [x8, #0x18]
    0x1014e8848 <+3636>: mov    x0, x26
    0x1014e884c <+3640>: mov    x1, x21
    0x1014e8850 <+3644>: bl     0x1015a9a8c               ; tensorflow::OpKernelContext::OpKernelContext(tensorflow::OpKernelContext::Params*, int)
    0x1014e8854 <+3648>: ldr    x0, [sp, #0xa8]
    0x1014e8858 <+3652>: str    x0, [x23, #0x320]
    0x1014e885c <+3656>: str    x23, [x23, #0x120]
    0x1014e8860 <+3660>: stp    x22, x19, [x23, #0x130]
    0x1014e8864 <+3664>: cbz    x0, 0x1014e8874           ; <+3680>
    0x1014e8868 <+3668>: ldr    x8, [x0]
    0x1014e886c <+3672>: ldr    x8, [x8, #0x20]
    0x1014e8870 <+3676>: blr    x8
    0x1014e8874 <+3680>: ldr    x8, [sp, #0x80]
    0x1014e8878 <+3684>: str    x8, [sp, #0x380]
    0x1014e887c <+3688>: adrp   x8, 9881
    0x1014e8880 <+3692>: add    x8, x8, #0x8a8            ; =0x8a8 
    0x1014e8884 <+3696>: str    x8, [sp, #0x378]
    0x1014e8888 <+3700>: add    x19, sp, #0x378           ; =0x378 
    0x1014e888c <+3704>: str    x19, [sp, #0x390]
    0x1014e8890 <+3708>: str    x23, [sp, #0x388]
    0x1014e8894 <+3712>: ldr    x0, [sp, #0x60]
    0x1014e8898 <+3716>: ldr    x8, [x0]
    0x1014e889c <+3720>: ldr    x8, [x8, #0xa0]
    0x1014e88a0 <+3724>: add    x3, sp, #0x378            ; =0x378 
    0x1014e88a4 <+3728>: mov    x1, x28
    0x1014e88a8 <+3732>: mov    x2, x26
    0x1014e88ac <+3736>: blr    x8
    0x1014e88b0 <+3740>: ldr    x0, [sp, #0x390]
    0x1014e88b4 <+3744>: cmp    x19, x0
    0x1014e88b8 <+3748>: b.eq   0x1014e88e4               ; <+3792>
    0x1014e88bc <+3752>: ldr    x27, [sp, #0x78]
    0x1014e88c0 <+3756>: ldr    x28, [sp, #0x68]
    0x1014e88c4 <+3760>: cbz    x0, 0x1014e8904           ; <+3824>
    0x1014e88c8 <+3764>: ldr    x8, [x0]
    0x1014e88cc <+3768>: ldr    x8, [x8, #0x28]
    0x1014e88d0 <+3772>: blr    x8
    0x1014e88d4 <+3776>: ldr    x25, [sp, #0x80]
    0x1014e88d8 <+3780>: ldrb   w8, [sp, #0x398]
    0x1014e88dc <+3784>: tbnz   w8, #0x0, 0x1014e9478     ; <+6756>
    0x1014e88e0 <+3788>: b      0x1014e9480               ; <+6764>
    0x1014e88e4 <+3792>: ldr    x8, [x0]
    0x1014e88e8 <+3796>: ldr    x8, [x8, #0x20]
    0x1014e88ec <+3800>: blr    x8
    0x1014e88f0 <+3804>: ldp    x27, x25, [sp, #0x78]
    0x1014e88f4 <+3808>: ldr    x28, [sp, #0x68]
    0x1014e88f8 <+3812>: ldrb   w8, [sp, #0x398]
    0x1014e88fc <+3816>: tbnz   w8, #0x0, 0x1014e9478     ; <+6756>
    0x1014e8900 <+3820>: b      0x1014e9480               ; <+6764>
    0x1014e8904 <+3824>: ldr    x25, [sp, #0x80]
    0x1014e8908 <+3828>: ldrb   w8, [sp, #0x398]
    0x1014e890c <+3832>: tbnz   w8, #0x0, 0x1014e9478     ; <+6756>
    0x1014e8910 <+3836>: b      0x1014e9480               ; <+6764>
    0x1014e8914 <+3840>: mov    x0, x23
    0x1014e8918 <+3844>: bl     0x1015a8cec               ; tensorflow::OpKernel::name() const
    0x1014e891c <+3848>: ldrsb  w8, [x0, #0x17]
    0x1014e8920 <+3852>: cmp    w8, #0x0                  ; =0x0 
    0x1014e8924 <+3856>: ldp    x9, x10, [x0]
    0x1014e8928 <+3860>: csel   x19, x9, x0, lt
    0x1014e892c <+3864>: and    x8, x8, #0xff
    0x1014e8930 <+3868>: csel   x20, x10, x8, lt
    0x1014e8934 <+3872>: mov    x0, x23
    0x1014e8938 <+3876>: bl     0x1015a88ec               ; tensorflow::OpKernel::type_string() const
    0x1014e893c <+3880>: ldrb   w8, [x0, #0x17]
    0x1014e8940 <+3884>: sxtb   w9, w8
    0x1014e8944 <+3888>: cmp    w9, #0x0                  ; =0x0 
    0x1014e8948 <+3892>: ldp    x9, x10, [x0]
    0x1014e894c <+3896>: csel   x21, x9, x0, lt
    0x1014e8950 <+3900>: csel   x22, x10, x8, lt
    0x1014e8954 <+3904>: ldr    x0, [x25, #0x20]
    0x1014e8958 <+3908>: ldr    x24, [sp, #0x20]
    0x1014e895c <+3912>: mov    x1, x24
    0x1014e8960 <+3916>: bl     0x10179eb4c               ; tensorflow::strings::FastInt64ToBufferLeft(long long, char*)
    0x1014e8964 <+3920>: str    x0, [sp, #0x230]
    0x1014e8968 <+3924>: str    x24, [sp, #0x228]
    0x1014e896c <+3928>: stp    x19, x20, [sp, #0x110]
    0x1014e8970 <+3932>: orr    w8, wzr, #0x1
    0x1014e8974 <+3936>: dup.2d v0, x8
    0x1014e8978 <+3940>: mov.16b v1, v0
    0x1014e897c <+3944>: adrp   x8, 9627
    0x1014e8980 <+3948>: add    x8, x8, #0xd78            ; =0xd78 
    0x1014e8984 <+3952>: mov.d  v1[0], x8
    0x1014e8988 <+3956>: str    q1, [sp, #0x120]
    0x1014e898c <+3960>: stp    x21, x22, [sp, #0x130]
    0x1014e8990 <+3964>: ldr    q1, [sp, #0x10]
    0x1014e8994 <+3968>: str    q1, [sp, #0x140]
    0x1014e8998 <+3972>: stp    x24, x0, [sp, #0x150]
    0x1014e899c <+3976>: adrp   x8, 9628
    0x1014e89a0 <+3980>: add    x8, x8, #0x300            ; =0x300 
    0x1014e89a4 <+3984>: mov.d  v0[0], x8
    0x1014e89a8 <+3988>: str    q0, [sp, #0x160]
    0x1014e89ac <+3992>: add    x0, sp, #0x110            ; =0x110 
    0x1014e89b0 <+3996>: orr    w1, wzr, #0x6
    0x1014e89b4 <+4000>: add    x8, sp, #0xf0             ; =0xf0 
    0x1014e89b8 <+4004>: bl     0x1017a3330               ; tensorflow::strings::internal::CatPieces(std::initializer_list<absl::string_view>)
    0x1014e89bc <+4008>: ldrb   w8, [x25, #0xc9]
    0x1014e89c0 <+4012>: cbz    w8, 0x1014e89fc           ; <+4072>
    0x1014e89c4 <+4016>: ldrsb  w8, [sp, #0x107]
    0x1014e89c8 <+4020>: ldp    x10, x9, [sp, #0xf0]
    0x1014e89cc <+4024>: cmp    w8, #0x0                  ; =0x0 
    0x1014e89d0 <+4028>: add    x11, sp, #0xf0            ; =0xf0 
    0x1014e89d4 <+4032>: csel   x28, x10, x11, lt
    0x1014e89d8 <+4036>: and    x8, x8, #0xff
    0x1014e89dc <+4040>: csel   x21, x9, x8, lt
    0x1014e89e0 <+4044>: adrp   x8, 10235
    0x1014e89e4 <+4048>: add    x8, x8, #0xd58            ; =0xd58 
    0x1014e89e8 <+4052>: ldar   w8, [x8]
    0x1014e89ec <+4056>: cmp    w8, #0x2                  ; =0x2 
    0x1014e89f0 <+4060>: b.ge   0x1014e8a54               ; <+4160>
    0x1014e89f4 <+4064>: mov    x0, #0x0
    0x1014e89f8 <+4068>: b      0x1014e8b00               ; <+4332>
    0x1014e89fc <+4072>: ldrsb  w8, [sp, #0x107]
    0x1014e8a00 <+4076>: ldp    x10, x9, [sp, #0xf0]
    0x1014e8a04 <+4080>: cmp    w8, #0x0                  ; =0x0 
    0x1014e8a08 <+4084>: add    x11, sp, #0xf0            ; =0xf0 
    0x1014e8a0c <+4088>: csel   x28, x10, x11, lt
    0x1014e8a10 <+4092>: and    x8, x8, #0xff
    0x1014e8a14 <+4096>: csel   x21, x9, x8, lt
    0x1014e8a18 <+4100>: ldr    x8, [x23]
    0x1014e8a1c <+4104>: ldr    x8, [x8, #0x28]
    0x1014e8a20 <+4108>: mov    x0, x23
    0x1014e8a24 <+4112>: blr    x8
    0x1014e8a28 <+4116>: cmp    w0, #0x0                  ; =0x0 
    0x1014e8a2c <+4120>: orr    w8, wzr, #0x2
    0x1014e8a30 <+4124>: cinc   w8, w8, eq
    0x1014e8a34 <+4128>: adrp   x9, 10235
    0x1014e8a38 <+4132>: add    x9, x9, #0xd58            ; =0xd58 
    0x1014e8a3c <+4136>: ldar   w9, [x9]
    0x1014e8a40 <+4140>: cmp    w9, w8
    0x1014e8a44 <+4144>: b.ge   0x1014e8a84               ; <+4208>
    0x1014e8a48 <+4148>: mov    x0, #0x0
    0x1014e8a4c <+4152>: ldr    x19, [sp, #0xa8]
    0x1014e8a50 <+4156>: b      0x1014e8bdc               ; <+4552>
    0x1014e8a54 <+4160>: str    xzr, [sp, #0x238]
    0x1014e8a58 <+4164>: str    xzr, [sp, #0x230]
    0x1014e8a5c <+4168>: str    xzr, [sp, #0x228]
    0x1014e8a60 <+4172>: cbz    x28, 0x1014e8af0          ; <+4316>
    0x1014e8a64 <+4176>: cmn    x21, #0x10                ; =0x10 
    0x1014e8a68 <+4180>: b.hs   0x1014e9678               ; <+7268>
    0x1014e8a6c <+4184>: cmp    x21, #0x17                ; =0x17 
    0x1014e8a70 <+4188>: b.hs   0x1014e8ab8               ; <+4260>
    0x1014e8a74 <+4192>: add    x22, sp, #0x228           ; =0x228 
    0x1014e8a78 <+4196>: strb   w21, [sp, #0x23f]
    0x1014e8a7c <+4200>: cbnz   x21, 0x1014e8adc          ; <+4296>
    0x1014e8a80 <+4204>: b      0x1014e8aec               ; <+4312>
    0x1014e8a84 <+4208>: str    xzr, [sp, #0x238]
    0x1014e8a88 <+4212>: str    xzr, [sp, #0x230]
    0x1014e8a8c <+4216>: str    xzr, [sp, #0x228]
    0x1014e8a90 <+4220>: ldr    x19, [sp, #0xa8]
    0x1014e8a94 <+4224>: cbz    x28, 0x1014e8bcc          ; <+4536>
    0x1014e8a98 <+4228>: cmn    x21, #0x10                ; =0x10 
    0x1014e8a9c <+4232>: b.hs   0x1014e9678               ; <+7268>
    0x1014e8aa0 <+4236>: cmp    x21, #0x17                ; =0x17 
    0x1014e8aa4 <+4240>: b.hs   0x1014e8b94               ; <+4480>
    0x1014e8aa8 <+4244>: add    x22, sp, #0x228           ; =0x228 
    0x1014e8aac <+4248>: strb   w21, [sp, #0x23f]
    0x1014e8ab0 <+4252>: cbnz   x21, 0x1014e8bb8          ; <+4516>
    0x1014e8ab4 <+4256>: b      0x1014e8bc8               ; <+4532>
    0x1014e8ab8 <+4260>: add    x8, x21, #0x10            ; =0x10 
    0x1014e8abc <+4264>: and    x19, x8, #0xfffffffffffffff0
    0x1014e8ac0 <+4268>: mov    x0, x19
    0x1014e8ac4 <+4272>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e8ac8 <+4276>: mov    x22, x0
    0x1014e8acc <+4280>: str    x0, [sp, #0x228]
    0x1014e8ad0 <+4284>: orr    x8, x19, #0x8000000000000000
    0x1014e8ad4 <+4288>: str    x8, [sp, #0x238]
    0x1014e8ad8 <+4292>: str    x21, [sp, #0x230]
    0x1014e8adc <+4296>: mov    x0, x22
    0x1014e8ae0 <+4300>: mov    x1, x28
    0x1014e8ae4 <+4304>: mov    x2, x21
    0x1014e8ae8 <+4308>: bl     0x1034605c8               ; symbol stub for: memcpy
    0x1014e8aec <+4312>: strb   wzr, [x22, x21]
    0x1014e8af0 <+4316>: bl     0x1017b136c               ; tensorflow::Env::Default()
    0x1014e8af4 <+4320>: ldr    x8, [x0]
    0x1014e8af8 <+4324>: ldr    x8, [x8, #0x40]
    0x1014e8afc <+4328>: blr    x8
    0x1014e8b00 <+4332>: str    x0, [sp, #0x240]
    0x1014e8b04 <+4336>: ldrb   w19, [sp, #0x107]
    0x1014e8b08 <+4340>: ldp    x21, x20, [sp, #0xf0]
    0x1014e8b0c <+4344>: bl     0x1017b79fc               ; tensorflow::tracing::GetTraceCollector()
    0x1014e8b10 <+4348>: ldp    x27, x25, [sp, #0x78]
    0x1014e8b14 <+4352>: ldr    x28, [sp, #0x68]
    0x1014e8b18 <+4356>: cbz    x0, 0x1014e8b4c           ; <+4408>
    0x1014e8b1c <+4360>: sxtb   w8, w19
    0x1014e8b20 <+4364>: cmp    w8, #0x0                  ; =0x0 
    0x1014e8b24 <+4368>: add    x8, sp, #0xf0             ; =0xf0 
    0x1014e8b28 <+4372>: csel   x1, x21, x8, lt
    0x1014e8b2c <+4376>: csel   x2, x20, x19, lt
    0x1014e8b30 <+4380>: ldr    x8, [x0]
    0x1014e8b34 <+4384>: ldr    x9, [x8, #0x10]
    0x1014e8b38 <+4388>: add    x8, sp, #0x110            ; =0x110 
    0x1014e8b3c <+4392>: mov    x3, #0x0
    0x1014e8b40 <+4396>: mov    x4, #0x0
    0x1014e8b44 <+4400>: blr    x9
    0x1014e8b48 <+4404>: b      0x1014e8b50               ; <+4412>
    0x1014e8b4c <+4408>: str    xzr, [sp, #0x110]
    0x1014e8b50 <+4412>: ldr    x19, [sp, #0xa8]
    0x1014e8b54 <+4416>: ldr    x21, [sp, #0xd8]
    0x1014e8b58 <+4420>: ldr    x0, [sp, #0x60]
    0x1014e8b5c <+4424>: ldr    x8, [x0]
    0x1014e8b60 <+4428>: ldr    x8, [x8, #0x98]
    0x1014e8b64 <+4432>: add    x2, sp, #0x258            ; =0x258 
    0x1014e8b68 <+4436>: mov    x1, x23
    0x1014e8b6c <+4440>: blr    x8
    0x1014e8b70 <+4444>: ldr    x0, [sp, #0x110]
    0x1014e8b74 <+4448>: str    xzr, [sp, #0x110]
    0x1014e8b78 <+4452>: cbz    x0, 0x1014e8b88           ; <+4468>
    0x1014e8b7c <+4456>: ldr    x8, [x0]
    0x1014e8b80 <+4460>: ldr    x8, [x8, #0x8]
    0x1014e8b84 <+4464>: blr    x8
    0x1014e8b88 <+4468>: ldr    x8, [sp, #0x240]
    0x1014e8b8c <+4472>: cbnz   x8, 0x1014e8c0c           ; <+4600>
    0x1014e8b90 <+4476>: b      0x1014e8c94               ; <+4736>
    0x1014e8b94 <+4480>: add    x8, x21, #0x10            ; =0x10 
    0x1014e8b98 <+4484>: and    x20, x8, #0xfffffffffffffff0
    0x1014e8b9c <+4488>: mov    x0, x20
    0x1014e8ba0 <+4492>: bl     0x10345ffb0               ; symbol stub for: operator new(unsigned long)
    0x1014e8ba4 <+4496>: mov    x22, x0
    0x1014e8ba8 <+4500>: str    x0, [sp, #0x228]
    0x1014e8bac <+4504>: orr    x8, x20, #0x8000000000000000
    0x1014e8bb0 <+4508>: str    x8, [sp, #0x238]
    0x1014e8bb4 <+4512>: str    x21, [sp, #0x230]
    0x1014e8bb8 <+4516>: mov    x0, x22
    0x1014e8bbc <+4520>: mov    x1, x28
    0x1014e8bc0 <+4524>: mov    x2, x21
    0x1014e8bc4 <+4528>: bl     0x1034605c8               ; symbol stub for: memcpy
    0x1014e8bc8 <+4532>: strb   wzr, [x22, x21]
    0x1014e8bcc <+4536>: bl     0x1017b136c               ; tensorflow::Env::Default()
    0x1014e8bd0 <+4540>: ldr    x8, [x0]
    0x1014e8bd4 <+4544>: ldr    x8, [x8, #0x40]
    0x1014e8bd8 <+4548>: blr    x8
    0x1014e8bdc <+4552>: str    x0, [sp, #0x240]
    0x1014e8be0 <+4556>: ldr    x0, [sp, #0x60]
    0x1014e8be4 <+4560>: ldr    x8, [x0]
    0x1014e8be8 <+4564>: ldr    x8, [x8, #0x98]
    0x1014e8bec <+4568>: add    x2, sp, #0x258            ; =0x258 
    0x1014e8bf0 <+4572>: mov    x1, x23
    0x1014e8bf4 <+4576>: blr    x8
    0x1014e8bf8 <+4580>: ldr    x8, [sp, #0x240]
    0x1014e8bfc <+4584>: ldp    x27, x25, [sp, #0x78]
    0x1014e8c00 <+4588>: ldr    x28, [sp, #0x68]
    0x1014e8c04 <+4592>: ldr    x21, [sp, #0xd8]
    0x1014e8c08 <+4596>: cbz    x8, 0x1014e8c94           ; <+4736>
    0x1014e8c0c <+4600>: adrp   x8, 10235
    0x1014e8c10 <+4604>: add    x8, x8, #0xd58            ; =0xd58 
    0x1014e8c14 <+4608>: ldar   w8, [x8]
    0x1014e8c18 <+4612>: cmp    w8, #0x1                  ; =0x1 
    0x1014e8c1c <+4616>: b.lt   0x1014e8c80               ; <+4716>
    0x1014e8c20 <+4620>: orr    w8, wzr, #0x1
    0x1014e8c24 <+4624>: str    x8, [sp, #0x110]
    0x1014e8c28 <+4628>: add    x8, sp, #0x228            ; =0x228 
    0x1014e8c2c <+4632>: ldr    q0, [x8]
    0x1014e8c30 <+4636>: ldr    x8, [sp, #0x240]
    0x1014e8c34 <+4640>: ldr    x9, [sp, #0x238]
    0x1014e8c38 <+4644>: ldr    x10, [sp, #0x8]
    0x1014e8c3c <+4648>: str    x9, [x10, #0x10]
    0x1014e8c40 <+4652>: str    q0, [x10]
    0x1014e8c44 <+4656>: str    xzr, [sp, #0x238]
    0x1014e8c48 <+4660>: str    xzr, [sp, #0x230]
    0x1014e8c4c <+4664>: str    xzr, [sp, #0x228]
    0x1014e8c50 <+4668>: str    x8, [sp, #0x130]
    0x1014e8c54 <+4672>: bl     0x1017b136c               ; tensorflow::Env::Default()
    0x1014e8c58 <+4676>: ldr    x8, [x0]
    0x1014e8c5c <+4680>: ldr    x8, [x8, #0x40]
    0x1014e8c60 <+4684>: blr    x8
    0x1014e8c64 <+4688>: str    x0, [sp, #0x138]
    0x1014e8c68 <+4692>: add    x0, sp, #0x110            ; =0x110 
    0x1014e8c6c <+4696>: bl     0x1017b8610               ; tensorflow::profiler::TraceMeRecorder::Record(tensorflow::profiler::TraceMeRecorder::Event)
    0x1014e8c70 <+4700>: ldrsb  w8, [sp, #0x12f]
    0x1014e8c74 <+4704>: tbz    w8, #0x1f, 0x1014e8c80    ; <+4716>
    0x1014e8c78 <+4708>: ldr    x0, [sp, #0x118]
    0x1014e8c7c <+4712>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8c80 <+4716>: ldrsb  w8, [sp, #0x23f]
    0x1014e8c84 <+4720>: tbz    w8, #0x1f, 0x1014e8c90    ; <+4732>
    0x1014e8c88 <+4724>: ldr    x0, [sp, #0x228]
    0x1014e8c8c <+4728>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8c90 <+4732>: str    xzr, [sp, #0x240]
    0x1014e8c94 <+4736>: ldrsb  w8, [sp, #0x107]
    0x1014e8c98 <+4740>: tbz    w8, #0x1f, 0x1014e8298    ; <+2180>
    0x1014e8c9c <+4744>: ldr    x0, [sp, #0xf0]
    0x1014e8ca0 <+4748>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8ca4 <+4752>: cbnz   x19, 0x1014e829c          ; <+2184>
    0x1014e8ca8 <+4756>: b      0x1014e82ac               ; <+2200>
    0x1014e8cac <+4760>: ldrsw  x10, [sp, #0x8e8]
    0x1014e8cb0 <+4764>: and    x9, x8, #0x1
    0x1014e8cb4 <+4768>: ldr    x0, [sp, #0x6e8]
    0x1014e8cb8 <+4772>: tst    x8, #0x1
    0x1014e8cbc <+4776>: ldr    x11, [sp, #0x98]
    0x1014e8cc0 <+4780>: csel   x11, x11, x0, eq
    0x1014e8cc4 <+4784>: add    x11, x11, x10, lsl #5
    0x1014e8cc8 <+4788>: ldr    q0, [x11]
    0x1014e8ccc <+4792>: ldr    x12, [x11, #0x10]
    0x1014e8cd0 <+4796>: ldrb   w11, [x11, #0x18]
    0x1014e8cd4 <+4800>: strb   w11, [x27, #0x18]
    0x1014e8cd8 <+4804>: str    x12, [x27, #0x10]
    0x1014e8cdc <+4808>: str    q0, [x27]
    0x1014e8ce0 <+4812>: add    x11, x10, #0x1            ; =0x1 
    0x1014e8ce4 <+4816>: str    w11, [sp, #0x8e8]
    0x1014e8ce8 <+4820>: lsr    x8, x8, #1
    0x1014e8cec <+4824>: subs   x12, x8, x11
    0x1014e8cf0 <+4828>: b.ne   0x1014e8d04               ; <+4848>
    0x1014e8cf4 <+4832>: cbz    x9, 0x1014e8cfc           ; <+4840>
    0x1014e8cf8 <+4836>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8cfc <+4840>: str    xzr, [sp, #0x6e0]
    0x1014e8d00 <+4844>: b      0x1014e8d34               ; <+4896>
    0x1014e8d04 <+4848>: cmp    w10, #0x4, lsl #12        ; =0x4000 
    0x1014e8d08 <+4852>: b.lt   0x1014e8d38               ; <+4900>
    0x1014e8d0c <+4856>: cmp    x9, #0x0                  ; =0x0 
    0x1014e8d10 <+4860>: ldr    x10, [sp, #0x98]
    0x1014e8d14 <+4864>: csel   x0, x10, x0, eq
    0x1014e8d18 <+4868>: bfi    x9, x12, #1, #63
    0x1014e8d1c <+4872>: add    x1, x0, x11, lsl #5
    0x1014e8d20 <+4876>: str    x9, [sp, #0x6e0]
    0x1014e8d24 <+4880>: add    x8, x0, x8, lsl #5
    0x1014e8d28 <+4884>: subs   x2, x8, x1
    0x1014e8d2c <+4888>: b.eq   0x1014e8d34               ; <+4896>
    0x1014e8d30 <+4892>: bl     0x1034605e0               ; symbol stub for: memmove
    0x1014e8d34 <+4896>: str    wzr, [sp, #0x8e8]
    0x1014e8d38 <+4900>: ldp    x23, x26, [x27]
    0x1014e8d3c <+4904>: ldr    x21, [x27, #0x10]
    0x1014e8d40 <+4908>: ldrsw  x8, [x23]
    0x1014e8d44 <+4912>: ldr    x9, [x28, #0x88]
    0x1014e8d48 <+4916>: ldr    w9, [x9, x8, lsl #2]
    0x1014e8d4c <+4920>: cmn    w9, #0x1                  ; =0x1 
    0x1014e8d50 <+4924>: b.eq   0x1014e8d60               ; <+4940>
    0x1014e8d54 <+4928>: ldr    x10, [x28, #0x90]
    0x1014e8d58 <+4932>: add    x20, x10, x9
    0x1014e8d5c <+4936>: b      0x1014e8d64               ; <+4944>
    0x1014e8d60 <+4940>: mov    x20, #0x0
    0x1014e8d64 <+4944>: ldp    x9, x10, [x25]
    0x1014e8d68 <+4948>: sub    x10, x10, x9
    0x1014e8d6c <+4952>: asr    x10, x10, #3
    0x1014e8d70 <+4956>: cmp    x10, x8
    0x1014e8d74 <+4960>: b.ls   0x1014e8d80               ; <+4972>
    0x1014e8d78 <+4964>: ldr    x8, [x9, x8, lsl #3]
    0x1014e8d7c <+4968>: str    x8, [sp, #0x5b8]
    0x1014e8d80 <+4972>: strb   wzr, [sp, #0x530]
    0x1014e8d84 <+4976>: ldr    x0, [x25, #0x70]
    0x1014e8d88 <+4980>: cbz    x0, 0x1014e8d94           ; <+4992>
    0x1014e8d8c <+4984>: ldrb   w8, [x27, #0x18]
    0x1014e8d90 <+4988>: cbz    w8, 0x1014e7fac           ; <+1432>
    0x1014e8d94 <+4992>: mov    x19, #0x0
    0x1014e8d98 <+4996>: str    x19, [sp, #0xa8]
    0x1014e8d9c <+5000>: ldr    x9, [x26, #0x50]
    0x1014e8da0 <+5004>: lsr    x8, x9, #1
    0x1014e8da4 <+5008>: udiv   x10, x21, x8
    0x1014e8da8 <+5012>: msub   x8, x10, x8, x21
    0x1014e8dac <+5016>: str    x21, [sp, #0x90]
    0x1014e8db0 <+5020>: tbnz   w9, #0x0, 0x1014e8dbc     ; <+5032>
    0x1014e8db4 <+5024>: add    x9, x26, #0x58            ; =0x58 
    0x1014e8db8 <+5028>: b      0x1014e8dc0               ; <+5036>
    0x1014e8dbc <+5032>: ldr    x9, [x26, #0x58]
    0x1014e8dc0 <+5036>: ldr    x8, [x9, x8, lsl #3]
    0x1014e8dc4 <+5040>: ldr    x19, [x8]
    0x1014e8dc8 <+5044>: str    x20, [sp, #0xd8]
    0x1014e8dcc <+5048>: ldrsw  x20, [x20, #0x1c]
    0x1014e8dd0 <+5052>: ldr    x8, [sp, #0x3f0]
    0x1014e8dd4 <+5056>: ldr    x22, [sp, #0x3e8]
    0x1014e8dd8 <+5060>: tst    x22, #0x1
    0x1014e8ddc <+5064>: ldr    x9, [sp, #0xa0]
    0x1014e8de0 <+5068>: csel   x21, x8, x9, ne
    0x1014e8de4 <+5072>: lsr    x24, x22, #1
    0x1014e8de8 <+5076>: cbz    x24, 0x1014e8e08          ; <+5108>
    0x1014e8dec <+5080>: mov    x0, x21
    0x1014e8df0 <+5084>: ldrb   w8, [x0, #0x31]
    0x1014e8df4 <+5088>: cbz    w8, 0x1014e8dfc           ; <+5096>
    0x1014e8df8 <+5092>: bl     0x1015c6d44               ; tensorflow::Tensor::~Tensor()
    0x1014e8dfc <+5096>: add    x0, x0, #0x48             ; =0x48 
    0x1014e8e00 <+5100>: subs   x24, x24, #0x1            ; =0x1 
    0x1014e8e04 <+5104>: b.ne   0x1014e8df0               ; <+5084>
    0x1014e8e08 <+5108>: str    x26, [sp, #0x88]
    0x1014e8e0c <+5112>: mov    w8, #0x48
    0x1014e8e10 <+5116>: madd   x26, x20, x8, x19
    0x1014e8e14 <+5120>: tbz    w22, #0x0, 0x1014e8e20    ; <+5132>
    0x1014e8e18 <+5124>: mov    x0, x21
    0x1014e8e1c <+5128>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8e20 <+5132>: str    xzr, [sp, #0x3e8]
    0x1014e8e24 <+5136>: str    xzr, [sp, #0x398]
    0x1014e8e28 <+5140>: ldrb   w8, [x27, #0x18]
    0x1014e8e2c <+5144>: cbz    w8, 0x1014e8e40           ; <+5164>
    0x1014e8e30 <+5148>: ldr    w8, [x23, #0x8]
    0x1014e8e34 <+5152>: orr    w8, w8, #0x3
    0x1014e8e38 <+5156>: cmp    w8, #0xb                  ; =0xb 
    0x1014e8e3c <+5160>: b.ne   0x1014e929c               ; <+6280>
    0x1014e8e40 <+5164>: ldrb   w8, [sp, #0x698]
    0x1014e8e44 <+5168>: ldr    x21, [sp, #0xd8]
    0x1014e8e48 <+5172>: tbz    w8, #0x0, 0x1014e8e54     ; <+5184>
    0x1014e8e4c <+5176>: ldr    x0, [sp, #0x6a0]
    0x1014e8e50 <+5180>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8e54 <+5184>: str    xzr, [sp, #0x698]
    0x1014e8e58 <+5188>: mov    x8, x21
    0x1014e8e5c <+5192>: ldrsw  x1, [x8, #0x14]!
    0x1014e8e60 <+5196>: str    x8, [sp, #0xc8]
    0x1014e8e64 <+5200>: add    x0, sp, #0x698            ; =0x698 
    0x1014e8e68 <+5204>: bl     0x1014ed320               ; absl::InlinedVector<tensorflow::TensorValue, 4ul, std::__1::allocator<tensorflow::TensorValue> >::resize(unsigned long)
    0x1014e8e6c <+5208>: ldrb   w8, [sp, #0x670]
    0x1014e8e70 <+5212>: tbz    w8, #0x0, 0x1014e8e7c     ; <+5224>
    0x1014e8e74 <+5216>: ldr    x0, [sp, #0x678]
    0x1014e8e78 <+5220>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8e7c <+5224>: str    xzr, [sp, #0x670]
    0x1014e8e80 <+5228>: ldr    x8, [sp, #0xc8]
    0x1014e8e84 <+5232>: ldrsw  x1, [x8]
    0x1014e8e88 <+5236>: add    x0, sp, #0x670            ; =0x670 
    0x1014e8e8c <+5240>: bl     0x1014ed500               ; absl::InlinedVector<tensorflow::Node*, 4ul, std::__1::allocator<tensorflow::Node*> >::resize(unsigned long)
    0x1014e8e90 <+5244>: ldrb   w8, [sp, #0x648]
    0x1014e8e94 <+5248>: tbz    w8, #0x0, 0x1014e8ea0     ; <+5260>
    0x1014e8e98 <+5252>: ldr    x0, [sp, #0x650]
    0x1014e8e9c <+5256>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e8ea0 <+5260>: str    xzr, [sp, #0x648]
    0x1014e8ea4 <+5264>: ldrsw  x1, [x21, #0x14]
    0x1014e8ea8 <+5268>: add    x0, sp, #0x648            ; =0x648 
    0x1014e8eac <+5272>: bl     0x1014ed740               ; absl::InlinedVector<tensorflow::AllocatorAttributes, 4ul, std::__1::allocator<tensorflow::AllocatorAttributes> >::resize(unsigned long)
    0x1014e8eb0 <+5276>: ldr    w8, [x21, #0x14]
    0x1014e8eb4 <+5280>: cmp    w8, #0x1                  ; =0x1 
    0x1014e8eb8 <+5284>: b.lt   0x1014e93c8               ; <+6580>
    0x1014e8ebc <+5288>: mov    x23, #0x0
    0x1014e8ec0 <+5292>: ldrb   w8, [x21, #0x10]
    0x1014e8ec4 <+5296>: stp    wzr, w8, [sp, #0xb0]
    0x1014e8ec8 <+5300>: add    x19, x21, #0x30           ; =0x30 
    0x1014e8ecc <+5304>: ldp    x27, x22, [sp, #0xb8]
    0x1014e8ed0 <+5308>: mov    w11, #0x48
    0x1014e8ed4 <+5312>: ldr    x12, [sp, #0xc8]
    0x1014e8ed8 <+5316>: b      0x1014e9118               ; <+5892>
    0x1014e8edc <+5320>: ldr    x21, [x27]
    0x1014e8ee0 <+5324>: mov    x0, x21
    0x1014e8ee4 <+5328>: bl     0x1017a6f88               ; tensorflow::mutex::lock_shared()
    0x1014e8ee8 <+5332>: ldr    x22, [x25]
    0x1014e8eec <+5336>: ldr    x8, [x22, #0x10]
    0x1014e8ef0 <+5340>: mov    w11, #0x48
    0x1014e8ef4 <+5344>: madd   x9, x23, x11, x26
    0x1014e8ef8 <+5348>: str    x8, [x9, #0x10]
    0x1014e8efc <+5352>: ldrb   w8, [x22, #0xf]
    0x1014e8f00 <+5356>: cmp    w8, #0x2                  ; =0x2 
    0x1014e8f04 <+5360>: b.ne   0x1014e8f24               ; <+5392>
    0x1014e8f08 <+5364>: madd   x8, x23, x11, x26
    0x1014e8f0c <+5368>: strb   wzr, [x8, #0xf]
    0x1014e8f10 <+5372>: mov    x0, x28
    0x1014e8f14 <+5376>: mov    x1, x22
    0x1014e8f18 <+5380>: bl     0x1015e1a18               ; tensorflow::TensorShapeRep::SlowCopyFrom(tensorflow::TensorShapeRep const&)
    0x1014e8f1c <+5384>: mov    w11, #0x48
    0x1014e8f20 <+5388>: b      0x1014e8f2c               ; <+5400>
    0x1014e8f24 <+5392>: ldr    q0, [x22]
    0x1014e8f28 <+5396>: str    q0, [x28]
    0x1014e8f2c <+5400>: madd   x9, x23, x11, x26
    0x1014e8f30 <+5404>: ldr    x8, [x22, #0x18]
    0x1014e8f34 <+5408>: str    x8, [x9, #0x18]
    0x1014e8f38 <+5412>: ldp    x27, x22, [sp, #0xb8]
    0x1014e8f3c <+5416>: cbz    x8, 0x1014e8f54           ; <+5440>
    0x1014e8f40 <+5420>: add    x8, x8, #0x8              ; =0x8 
    0x1014e8f44 <+5424>: ldxr   w9, [x8]
    0x1014e8f48 <+5428>: add    w9, w9, #0x1              ; =0x1 
    0x1014e8f4c <+5432>: stxr   w10, w9, [x8]
    0x1014e8f50 <+5436>: cbnz   w10, 0x1014e8f44          ; <+5424>
    0x1014e8f54 <+5440>: mov    w24, #0x48
    0x1014e8f58 <+5444>: madd   x8, x23, x11, x26
    0x1014e8f5c <+5448>: orr    w9, wzr, #0x1
    0x1014e8f60 <+5452>: strb   w9, [x8, #0x31]
    0x1014e8f64 <+5456>: cbz    x21, 0x1014e8f70          ; <+5468>
    0x1014e8f68 <+5460>: mov    x0, x21
    0x1014e8f6c <+5464>: bl     0x1017a6fa8               ; tensorflow::mutex::unlock_shared()
    0x1014e8f70 <+5468>: add    x20, x20, x23, lsl #4
    0x1014e8f74 <+5472>: stp    xzr, xzr, [x25]
    0x1014e8f78 <+5476>: str    x28, [x20, #0x8]!
    0x1014e8f7c <+5480>: ldr    x21, [sp, #0xd8]
    0x1014e8f80 <+5484>: ldr    x8, [x21, #0x20]
    0x1014e8f84 <+5488>: orr    w9, wzr, #0xc
    0x1014e8f88 <+5492>: madd   x8, x8, x9, x19
    0x1014e8f8c <+5496>: ldrsw  x9, [x21, #0x18]
    0x1014e8f90 <+5500>: add    x8, x8, x9, lsl #3
    0x1014e8f94 <+5504>: add    x8, x8, x9, lsl #2
    0x1014e8f98 <+5508>: ldrb   w0, [x8, x23]
    0x1014e8f9c <+5512>: madd   x8, x23, x24, x26
    0x1014e8fa0 <+5516>: ldrb   w8, [x8, #0xd]
    0x1014e8fa4 <+5520>: cmp    w0, w8
    0x1014e8fa8 <+5524>: b.ne   0x1014e8420               ; <+2572>
    0x1014e8fac <+5528>: mov    w11, #0x48
    0x1014e8fb0 <+5532>: ldr    x12, [sp, #0xc8]
    0x1014e8fb4 <+5536>: add    x23, x23, #0x1            ; =0x1 
    0x1014e8fb8 <+5540>: ldrsw  x8, [x12]
    0x1014e8fbc <+5544>: cmp    x23, x8
    0x1014e8fc0 <+5548>: b.lt   0x1014e9118               ; <+5892>
    0x1014e8fc4 <+5552>: b      0x1014e93d0               ; <+6588>
    0x1014e8fc8 <+5556>: ldr    q0, [x21]
    0x1014e8fcc <+5560>: str    q0, [x28]
    0x1014e8fd0 <+5564>: madd   x9, x23, x11, x26
    0x1014e8fd4 <+5568>: ldr    x8, [x21, #0x18]
    0x1014e8fd8 <+5572>: str    x8, [x9, #0x18]
    0x1014e8fdc <+5576>: cbz    x8, 0x1014e8ff4           ; <+5600>
    0x1014e8fe0 <+5580>: add    x8, x8, #0x8              ; =0x8 
    0x1014e8fe4 <+5584>: ldxr   w9, [x8]
    0x1014e8fe8 <+5588>: add    w9, w9, #0x1              ; =0x1 
    0x1014e8fec <+5592>: stxr   w10, w9, [x8]
    0x1014e8ff0 <+5596>: cbnz   w10, 0x1014e8fe4          ; <+5584>
    0x1014e8ff4 <+5600>: add    x8, x20, x23, lsl #4
    0x1014e8ff8 <+5604>: str    x28, [x8, #0x8]
    0x1014e8ffc <+5608>: orr    w8, wzr, #0x1
    0x1014e9000 <+5612>: str    w8, [sp, #0xb0]
    0x1014e9004 <+5616>: ldr    x21, [sp, #0xd8]
    0x1014e9008 <+5620>: add    x23, x23, #0x1            ; =0x1 
    0x1014e900c <+5624>: ldrsw  x8, [x12]
    0x1014e9010 <+5628>: cmp    x23, x8
    0x1014e9014 <+5632>: b.lt   0x1014e9118               ; <+5892>
    0x1014e9018 <+5636>: b      0x1014e93d0               ; <+6588>
    0x1014e901c <+5640>: ldr    x0, [x22, #0x8]
    0x1014e9020 <+5644>: mov    x1, x23
    0x1014e9024 <+5648>: bl     0x1015a8d04               ; tensorflow::OpKernel::requested_input(int) const
    0x1014e9028 <+5652>: mov    x1, x0
    0x1014e902c <+5656>: add    x0, sp, #0xf0             ; =0xf0 
    0x1014e9030 <+5660>: bl     0x10345fbe4               ; symbol stub for: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)
    0x1014e9034 <+5664>: mov    w8, #0x26
    0x1014e9038 <+5668>: str    x8, [sp, #0x260]
    0x1014e903c <+5672>: adrp   x8, 9627
    0x1014e9040 <+5676>: add    x8, x8, #0x637            ; =0x637 
    0x1014e9044 <+5680>: str    x8, [sp, #0x258]
    0x1014e9048 <+5684>: ldrsb  w8, [sp, #0x107]
    0x1014e904c <+5688>: ldp    x10, x9, [sp, #0xf0]
    0x1014e9050 <+5692>: cmp    w8, #0x0                  ; =0x0 
    0x1014e9054 <+5696>: add    x11, sp, #0xf0            ; =0xf0 
    0x1014e9058 <+5700>: csel   x10, x10, x11, lt
    0x1014e905c <+5704>: and    x8, x8, #0xff
    0x1014e9060 <+5708>: csel   x8, x9, x8, lt
    0x1014e9064 <+5712>: stp    x10, x8, [sp, #0x110]
    0x1014e9068 <+5716>: add    x0, sp, #0x258            ; =0x258 
    0x1014e906c <+5720>: add    x1, sp, #0x110            ; =0x110 
    0x1014e9070 <+5724>: add    x8, sp, #0x228            ; =0x228 
    0x1014e9074 <+5728>: bl     0x1017a316c               ; tensorflow::strings::StrCat(tensorflow::strings::AlphaNum const&, tensorflow::strings::AlphaNum const&)
    0x1014e9078 <+5732>: ldrsb  w8, [sp, #0x23f]
    0x1014e907c <+5736>: ldr    x9, [sp, #0x230]
    0x1014e9080 <+5740>: ldr    x10, [sp, #0x228]
    0x1014e9084 <+5744>: cmp    w8, #0x0                  ; =0x0 
    0x1014e9088 <+5748>: add    x11, sp, #0x228           ; =0x228 
    0x1014e908c <+5752>: csel   x2, x10, x11, lt
    0x1014e9090 <+5756>: and    x8, x8, #0xff
    0x1014e9094 <+5760>: csel   x3, x9, x8, lt
    0x1014e9098 <+5764>: mov    w1, #0x9
    0x1014e909c <+5768>: add    x0, sp, #0x108            ; =0x108 
    0x1014e90a0 <+5772>: bl     0x10178cfe4               ; tensorflow::Status::Status(tensorflow::error::Code, absl::string_view)
    0x1014e90a4 <+5776>: ldrsb  w8, [sp, #0x23f]
    0x1014e90a8 <+5780>: tbz    w8, #0x1f, 0x1014e90b4    ; <+5792>
    0x1014e90ac <+5784>: ldr    x0, [sp, #0x228]
    0x1014e90b0 <+5788>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e90b4 <+5792>: ldr    x8, [x22, #0x8]
    0x1014e90b8 <+5796>: ldr    x1, [x8, #0x8]
    0x1014e90bc <+5800>: add    x0, sp, #0x108            ; =0x108 
    0x1014e90c0 <+5804>: add    x8, sp, #0xe0             ; =0xe0 
    0x1014e90c4 <+5808>: mov    w2, #0x0
    0x1014e90c8 <+5812>: bl     0x10158ecfc               ; tensorflow::AttachDef(tensorflow::Status const&, tensorflow::NodeDef const&, bool)
    0x1014e90cc <+5816>: ldr    x22, [sp, #0x108]
    0x1014e90d0 <+5820>: str    xzr, [sp, #0x108]
    0x1014e90d4 <+5824>: cbz    x22, 0x1014e90f0          ; <+5852>
    0x1014e90d8 <+5828>: ldrsb  w8, [x22, #0x1f]
    0x1014e90dc <+5832>: tbz    w8, #0x1f, 0x1014e90e8    ; <+5844>
    0x1014e90e0 <+5836>: ldr    x0, [x22, #0x8]
    0x1014e90e4 <+5840>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e90e8 <+5844>: mov    x0, x22
    0x1014e90ec <+5848>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e90f0 <+5852>: ldrsb  w8, [sp, #0x107]
    0x1014e90f4 <+5856>: tbnz   w8, #0x1f, 0x1014e9104    ; <+5872>
    0x1014e90f8 <+5860>: orr    w22, wzr, #0x1
    0x1014e90fc <+5864>: cbnz   x21, 0x1014e91d0          ; <+6076>
    0x1014e9100 <+5868>: b      0x1014e91d8               ; <+6084>
    0x1014e9104 <+5872>: ldr    x0, [sp, #0xf0]
    0x1014e9108 <+5876>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e910c <+5880>: orr    w22, wzr, #0x1
    0x1014e9110 <+5884>: cbnz   x21, 0x1014e91d0          ; <+6076>
    0x1014e9114 <+5888>: b      0x1014e91d8               ; <+6084>
    0x1014e9118 <+5892>: ldr    x8, [x21, #0x20]
    0x1014e911c <+5896>: orr    w9, wzr, #0xc
    0x1014e9120 <+5900>: madd   x8, x8, x9, x19
    0x1014e9124 <+5904>: ldrsw  x9, [x21, #0x18]
    0x1014e9128 <+5908>: add    x8, x8, x9, lsl #3
    0x1014e912c <+5912>: add    x8, x8, x9, lsl #2
    0x1014e9130 <+5916>: ldrb   w24, [x8, x23]
    0x1014e9134 <+5920>: madd   x28, x23, x11, x26
    0x1014e9138 <+5924>: ldr    x8, [x28, #0x40]
    0x1014e913c <+5928>: ldr    x9, [sp, #0x678]
    0x1014e9140 <+5932>: ldr    x10, [sp, #0x670]
    0x1014e9144 <+5936>: tst    x10, #0x1
    0x1014e9148 <+5940>: csel   x9, x22, x9, eq
    0x1014e914c <+5944>: lsl    x10, x23, #3
    0x1014e9150 <+5948>: str    x8, [x9, x10]
    0x1014e9154 <+5952>: ldr    x8, [sp, #0x650]
    0x1014e9158 <+5956>: ldr    x9, [sp, #0x648]
    0x1014e915c <+5960>: tst    x9, #0x1
    0x1014e9160 <+5964>: csel   x8, x27, x8, eq
    0x1014e9164 <+5968>: ldur   x9, [x28, #0x34]
    0x1014e9168 <+5972>: str    x9, [x8, x10]
    0x1014e916c <+5976>: ldr    x8, [sp, #0x6a0]
    0x1014e9170 <+5980>: ldrb   w9, [sp, #0x698]
    0x1014e9174 <+5984>: tst    w9, #0x1
    0x1014e9178 <+5988>: ldr    x9, [sp, #0xd0]
    0x1014e917c <+5992>: csel   x20, x9, x8, eq
    0x1014e9180 <+5996>: mov    x8, x28
    0x1014e9184 <+6000>: ldrb   w9, [x8, #0x30]!
    0x1014e9188 <+6004>: cbz    w9, 0x1014e9214           ; <+6144>
    0x1014e918c <+6008>: madd   x25, x23, x11, x26
    0x1014e9190 <+6012>: ldr    x8, [x25, #0x20]!
    0x1014e9194 <+6016>: cbz    x8, 0x1014e9278           ; <+6244>
    0x1014e9198 <+6020>: madd   x27, x23, x11, x26
    0x1014e919c <+6024>: ldr    x21, [x27, #0x28]!
    0x1014e91a0 <+6028>: mov    x0, x21
    0x1014e91a4 <+6032>: bl     0x1017a6f88               ; tensorflow::mutex::lock_shared()
    0x1014e91a8 <+6036>: ldr    x0, [x25]
    0x1014e91ac <+6040>: bl     0x1015c68b0               ; tensorflow::Tensor::IsInitialized() const
    0x1014e91b0 <+6044>: tbnz   w0, #0x0, 0x1014e91c8     ; <+6068>
    0x1014e91b4 <+6048>: ldr    x22, [sp, #0xd8]
    0x1014e91b8 <+6052>: ldr    x0, [x22]
    0x1014e91bc <+6056>: bl     0x101616b50               ; tensorflow::Node::op_def() const
    0x1014e91c0 <+6060>: ldrb   w8, [x0, #0x93]
    0x1014e91c4 <+6064>: cbz    w8, 0x1014e901c           ; <+5640>
    0x1014e91c8 <+6068>: mov    w22, #0x0
    0x1014e91cc <+6072>: cbz    x21, 0x1014e91d8          ; <+6084>
    0x1014e91d0 <+6076>: mov    x0, x21
    0x1014e91d4 <+6080>: bl     0x1017a6fa8               ; tensorflow::mutex::unlock_shared()
    0x1014e91d8 <+6084>: cbnz   w22, 0x1014e80b4          ; <+1696>
    0x1014e91dc <+6088>: cmp    w24, #0x65                ; =0x65 
    0x1014e91e0 <+6092>: b.lo   0x1014e8edc               ; <+5320>
    0x1014e91e4 <+6096>: ldr    q0, [x25]
    0x1014e91e8 <+6100>: ext.16b v0, v0, v0, #0x8
    0x1014e91ec <+6104>: str    q0, [x20, x23, lsl #4]
    0x1014e91f0 <+6108>: ldp    x27, x22, [sp, #0xb8]
    0x1014e91f4 <+6112>: mov    w11, #0x48
    0x1014e91f8 <+6116>: ldr    x21, [sp, #0xd8]
    0x1014e91fc <+6120>: ldr    x12, [sp, #0xc8]
    0x1014e9200 <+6124>: add    x23, x23, #0x1            ; =0x1 
    0x1014e9204 <+6128>: ldrsw  x8, [x12]
    0x1014e9208 <+6132>: cmp    x23, x8
    0x1014e920c <+6136>: b.lt   0x1014e9118               ; <+5892>
    0x1014e9210 <+6140>: b      0x1014e93d0               ; <+6588>
    0x1014e9214 <+6144>: ldr    w9, [sp, #0xb4]
    0x1014e9218 <+6148>: tbnz   w9, #0x1, 0x1014e9288     ; <+6260>
    0x1014e921c <+6152>: orr    w9, wzr, #0x1
    0x1014e9220 <+6156>: strb   w9, [x8]
    0x1014e9224 <+6160>: madd   x8, x23, x11, x26
    0x1014e9228 <+6164>: strb   w9, [x8, #0x31]
    0x1014e922c <+6168>: adrp   x9, 10249
    0x1014e9230 <+6172>: ldr    x21, [x9, #0xf60]
    0x1014e9234 <+6176>: ldr    x9, [x21, #0x10]
    0x1014e9238 <+6180>: str    x9, [x8, #0x10]
    0x1014e923c <+6184>: ldrb   w8, [x21, #0xf]
    0x1014e9240 <+6188>: cmp    w8, #0x2                  ; =0x2 
    0x1014e9244 <+6192>: b.ne   0x1014e8fc8               ; <+5556>
    0x1014e9248 <+6196>: madd   x8, x23, x11, x26
    0x1014e924c <+6200>: strb   wzr, [x8, #0xf]
    0x1014e9250 <+6204>: mov    x0, x28
    0x1014e9254 <+6208>: mov    x1, x21
    0x1014e9258 <+6212>: bl     0x1015e1a18               ; tensorflow::TensorShapeRep::SlowCopyFrom(tensorflow::TensorShapeRep const&)
    0x1014e925c <+6216>: ldr    x12, [sp, #0xc8]
    0x1014e9260 <+6220>: mov    w11, #0x48
    0x1014e9264 <+6224>: madd   x9, x23, x11, x26
    0x1014e9268 <+6228>: ldr    x8, [x21, #0x18]
    0x1014e926c <+6232>: str    x8, [x9, #0x18]
    0x1014e9270 <+6236>: cbnz   x8, 0x1014e8fe0           ; <+5580>
    0x1014e9274 <+6240>: b      0x1014e8ff4               ; <+5600>
    0x1014e9278 <+6244>: cmp    w24, #0x65                ; =0x65 
    0x1014e927c <+6248>: b.hs   0x1014e8348               ; <+2356>
    0x1014e9280 <+6252>: add    x8, x20, x23, lsl #4
    0x1014e9284 <+6256>: str    x28, [x8, #0x8]
    0x1014e9288 <+6260>: add    x23, x23, #0x1            ; =0x1 
    0x1014e928c <+6264>: ldrsw  x8, [x12]
    0x1014e9290 <+6268>: cmp    x23, x8
    0x1014e9294 <+6272>: b.lt   0x1014e9118               ; <+5892>
    0x1014e9298 <+6276>: b      0x1014e93d0               ; <+6588>
    0x1014e929c <+6280>: ldr    x20, [sp, #0xd8]
    0x1014e92a0 <+6284>: ldrsw  x1, [x20, #0x18]
    0x1014e92a4 <+6288>: add    x0, sp, #0x3e8            ; =0x3e8 
    0x1014e92a8 <+6292>: bl     0x1014e97ac               ; absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::Entry, 4ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::Entry> >::resize(unsigned long)
    0x1014e92ac <+6296>: mov    x23, #0x0
    0x1014e92b0 <+6300>: add    x8, x20, #0x14            ; =0x14 
    0x1014e92b4 <+6304>: ldr    w19, [x8]
    0x1014e92b8 <+6308>: cmp    w19, #0x1                 ; =0x1 
    0x1014e92bc <+6312>: b.lt   0x1014e92e0               ; <+6348>
    0x1014e92c0 <+6316>: ldrb   w8, [x26, #0x31]
    0x1014e92c4 <+6320>: cbz    w8, 0x1014e92d4           ; <+6336>
    0x1014e92c8 <+6324>: mov    x0, x26
    0x1014e92cc <+6328>: bl     0x1015c6d44               ; tensorflow::Tensor::~Tensor()
    0x1014e92d0 <+6332>: strh   wzr, [x26, #0x30]
    0x1014e92d4 <+6336>: add    x26, x26, #0x48           ; =0x48 
    0x1014e92d8 <+6340>: subs   x19, x19, #0x1            ; =0x1 
    0x1014e92dc <+6344>: b.ne   0x1014e92c0               ; <+6316>
    0x1014e92e0 <+6348>: ldr    x8, [sp, #0xe8]
    0x1014e92e4 <+6352>: cbnz   x8, 0x1014e9300           ; <+6380>
    0x1014e92e8 <+6356>: add    x3, sp, #0x3e8            ; =0x3e8 
    0x1014e92ec <+6360>: add    x4, sp, #0x8f0            ; =0x8f0 
    0x1014e92f0 <+6364>: mov    x0, x25
    0x1014e92f4 <+6368>: mov    x1, x27
    0x1014e92f8 <+6372>: mov    x2, x20
    0x1014e92fc <+6376>: bl     0x1014ea32c               ; tensorflow::(anonymous namespace)::ExecutorState::PropagateOutputs(tensorflow::(anonymous namespace)::ExecutorState::TaggedNode const&, tensorflow::(anonymous namespace)::NodeItem const*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::Entry, 4ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::Entry> >*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, 8ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode> >*)
    0x1014e9300 <+6380>: ldr    x8, [sp, #0x3f0]
    0x1014e9304 <+6384>: ldr    x19, [sp, #0x3e8]
    0x1014e9308 <+6388>: tst    x19, #0x1
    0x1014e930c <+6392>: ldr    x9, [sp, #0xa0]
    0x1014e9310 <+6396>: csel   x21, x8, x9, ne
    0x1014e9314 <+6400>: lsr    x20, x19, #1
    0x1014e9318 <+6404>: cbz    x20, 0x1014e9338          ; <+6436>
    0x1014e931c <+6408>: mov    x0, x21
    0x1014e9320 <+6412>: ldrb   w8, [x0, #0x31]
    0x1014e9324 <+6416>: cbz    w8, 0x1014e932c           ; <+6424>
    0x1014e9328 <+6420>: bl     0x1015c6d44               ; tensorflow::Tensor::~Tensor()
    0x1014e932c <+6424>: add    x0, x0, #0x48             ; =0x48 
    0x1014e9330 <+6428>: subs   x20, x20, #0x1            ; =0x1 
    0x1014e9334 <+6432>: b.ne   0x1014e9320               ; <+6412>
    0x1014e9338 <+6436>: tbz    w19, #0x0, 0x1014e9344    ; <+6448>
    0x1014e933c <+6440>: mov    x0, x21
    0x1014e9340 <+6444>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9344 <+6448>: str    xzr, [sp, #0x3e8]
    0x1014e9348 <+6452>: ldr    x8, [sp, #0x398]
    0x1014e934c <+6456>: cmp    x8, #0x2                  ; =0x2 
    0x1014e9350 <+6460>: ldr    x19, [sp, #0xa8]
    0x1014e9354 <+6464>: b.lo   0x1014e9388               ; <+6516>
    0x1014e9358 <+6468>: cbz    x19, 0x1014e9370          ; <+6492>
    0x1014e935c <+6472>: ldr    x8, [x19]
    0x1014e9360 <+6476>: ldr    x8, [x8, #0x50]
    0x1014e9364 <+6480>: add    x1, sp, #0x398            ; =0x398 
    0x1014e9368 <+6484>: mov    x0, x19
    0x1014e936c <+6488>: blr    x8
    0x1014e9370 <+6492>: ldr    x0, [sp, #0x60]
    0x1014e9374 <+6496>: ldr    x8, [x0]
    0x1014e9378 <+6500>: ldr    x8, [x8, #0xa8]
    0x1014e937c <+6504>: add    x2, sp, #0x398            ; =0x398 
    0x1014e9380 <+6508>: mov    x1, x23
    0x1014e9384 <+6512>: blr    x8
    0x1014e9388 <+6516>: cbz    x19, 0x1014e8008          ; <+1524>
    0x1014e938c <+6520>: bl     0x1017b136c               ; tensorflow::Env::Default()
    0x1014e9390 <+6524>: ldr    x8, [x0]
    0x1014e9394 <+6528>: ldr    x8, [x8, #0x40]
    0x1014e9398 <+6532>: blr    x8
    0x1014e939c <+6536>: str    x0, [sp, #0x58]
    0x1014e93a0 <+6540>: add    x1, sp, #0xe8             ; =0xe8 
    0x1014e93a4 <+6544>: add    x2, sp, #0x8f0            ; =0x8f0 
    0x1014e93a8 <+6548>: add    x4, sp, #0x6e0            ; =0x6e0 
    0x1014e93ac <+6552>: mov    x0, x25
    0x1014e93b0 <+6556>: mov    x3, x19
    0x1014e93b4 <+6560>: bl     0x1014e99ec               ; tensorflow::(anonymous namespace)::ExecutorState::NodeDone(tensorflow::Status const&, tensorflow::Node const*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, 8ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode> > const&, tensorflow::NodeExecStatsInterface*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNodeReadyQueue*)
    0x1014e93b8 <+6564>: str    w0, [sp, #0x74]
    0x1014e93bc <+6568>: ldrb   w8, [sp, #0x398]
    0x1014e93c0 <+6572>: tbnz   w8, #0x0, 0x1014e9478     ; <+6756>
    0x1014e93c4 <+6576>: b      0x1014e9480               ; <+6764>
    0x1014e93c8 <+6580>: str    wzr, [sp, #0xb0]
    0x1014e93cc <+6584>: ldr    x12, [sp, #0xc8]
    0x1014e93d0 <+6588>: str    xzr, [sp, #0xe0]
    0x1014e93d4 <+6592>: ldr    x25, [sp, #0x80]
    0x1014e93d8 <+6596>: ldr    x28, [sp, #0x68]
    0x1014e93dc <+6600>: ldp    x1, x21, [sp, #0xe0]
    0x1014e93e0 <+6604>: cmp    x21, x1
    0x1014e93e4 <+6608>: b.eq   0x1014e93f8               ; <+6628>
    0x1014e93e8 <+6612>: add    x0, sp, #0xe8             ; =0xe8 
    0x1014e93ec <+6616>: bl     0x10178d000               ; tensorflow::Status::SlowCopyFrom(tensorflow::Status::State const*)
    0x1014e93f0 <+6620>: ldr    x12, [sp, #0xc8]
    0x1014e93f4 <+6624>: ldr    x21, [sp, #0xe0]
    0x1014e93f8 <+6628>: ldr    x27, [sp, #0x78]
    0x1014e93fc <+6632>: str    xzr, [sp, #0xe0]
    0x1014e9400 <+6636>: cbz    x21, 0x1014e9420          ; <+6668>
    0x1014e9404 <+6640>: ldrsb  w8, [x21, #0x1f]
    0x1014e9408 <+6644>: tbz    w8, #0x1f, 0x1014e9414    ; <+6656>
    0x1014e940c <+6648>: ldr    x0, [x21, #0x8]
    0x1014e9410 <+6652>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9414 <+6656>: mov    x0, x21
    0x1014e9418 <+6660>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e941c <+6664>: ldr    x12, [sp, #0xc8]
    0x1014e9420 <+6668>: ldr    x8, [sp, #0xe8]
    0x1014e9424 <+6672>: cbz    x8, 0x1014e7e20           ; <+1036>
    0x1014e9428 <+6676>: ldr    w19, [x12]
    0x1014e942c <+6680>: cmp    w19, #0x1                 ; =0x1 
    0x1014e9430 <+6684>: b.lt   0x1014e9454               ; <+6720>
    0x1014e9434 <+6688>: ldrb   w8, [x26, #0x31]
    0x1014e9438 <+6692>: cbz    w8, 0x1014e9448           ; <+6708>
    0x1014e943c <+6696>: mov    x0, x26
    0x1014e9440 <+6700>: bl     0x1015c6d44               ; tensorflow::Tensor::~Tensor()
    0x1014e9444 <+6704>: strh   wzr, [x26, #0x30]
    0x1014e9448 <+6708>: add    x26, x26, #0x48           ; =0x48 
    0x1014e944c <+6712>: subs   x19, x19, #0x1            ; =0x1 
    0x1014e9450 <+6716>: b.ne   0x1014e9434               ; <+6688>
    0x1014e9454 <+6720>: add    x1, sp, #0xe8             ; =0xe8 
    0x1014e9458 <+6724>: add    x2, sp, #0x8f0            ; =0x8f0 
    0x1014e945c <+6728>: add    x4, sp, #0x6e0            ; =0x6e0 
    0x1014e9460 <+6732>: mov    x0, x25
    0x1014e9464 <+6736>: ldr    x3, [sp, #0xa8]
    0x1014e9468 <+6740>: bl     0x1014e99ec               ; tensorflow::(anonymous namespace)::ExecutorState::NodeDone(tensorflow::Status const&, tensorflow::Node const*, absl::InlinedVector<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode, 8ul, std::__1::allocator<tensorflow::(anonymous namespace)::ExecutorState::TaggedNode> > const&, tensorflow::NodeExecStatsInterface*, tensorflow::(anonymous namespace)::ExecutorState::TaggedNodeReadyQueue*)
    0x1014e946c <+6744>: str    w0, [sp, #0x74]
    0x1014e9470 <+6748>: ldrb   w8, [sp, #0x398]
    0x1014e9474 <+6752>: tbz    w8, #0x0, 0x1014e9480     ; <+6764>
    0x1014e9478 <+6756>: ldr    x0, [sp, #0x3a0]
    0x1014e947c <+6760>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9480 <+6764>: ldr    x8, [sp, #0x6e0]
    0x1014e9484 <+6768>: cmp    x8, #0x1                  ; =0x1 
    0x1014e9488 <+6772>: b.hi   0x1014e8cac               ; <+4760>
    0x1014e948c <+6776>: ldr    w8, [sp, #0x74]
    0x1014e9490 <+6780>: tbz    w8, #0x0, 0x1014e94d0     ; <+6844>
    0x1014e9494 <+6784>: add    x20, x25, #0x100          ; =0x100 
    0x1014e9498 <+6788>: mov    x0, x20
    0x1014e949c <+6792>: bl     0x1017a6f64               ; tensorflow::mutex::lock()
    0x1014e94a0 <+6796>: ldr    x8, [x25, #0x110]
    0x1014e94a4 <+6800>: cmp    x8, #0x1                  ; =0x1 
    0x1014e94a8 <+6804>: b.lt   0x1014e94c0               ; <+6828>
    0x1014e94ac <+6808>: orr    w8, wzr, #0x1
    0x1014e94b0 <+6812>: strb   w8, [x25, #0x118]
    0x1014e94b4 <+6816>: mov    x0, x20
    0x1014e94b8 <+6820>: bl     0x1017a6f84               ; tensorflow::mutex::unlock()
    0x1014e94bc <+6824>: b      0x1014e94d0               ; <+6844>
    0x1014e94c0 <+6828>: mov    x0, x20
    0x1014e94c4 <+6832>: bl     0x1017a6f84               ; tensorflow::mutex::unlock()
    0x1014e94c8 <+6836>: mov    x0, x25
    0x1014e94cc <+6840>: bl     0x1014eb5fc               ; tensorflow::(anonymous namespace)::ExecutorState::Finish()
    0x1014e94d0 <+6844>: ldr    x8, [sp, #0x3f0]
    0x1014e94d4 <+6848>: ldr    x20, [sp, #0x3e8]
    0x1014e94d8 <+6852>: tst    x20, #0x1
    0x1014e94dc <+6856>: ldr    x9, [sp, #0xa0]
    0x1014e94e0 <+6860>: csel   x19, x8, x9, ne
    0x1014e94e4 <+6864>: lsr    x21, x20, #1
    0x1014e94e8 <+6868>: cbz    x21, 0x1014e9508          ; <+6900>
    0x1014e94ec <+6872>: mov    x0, x19
    0x1014e94f0 <+6876>: ldrb   w8, [x0, #0x31]
    0x1014e94f4 <+6880>: cbz    w8, 0x1014e94fc           ; <+6888>
    0x1014e94f8 <+6884>: bl     0x1015c6d44               ; tensorflow::Tensor::~Tensor()
    0x1014e94fc <+6888>: add    x0, x0, #0x48             ; =0x48 
    0x1014e9500 <+6892>: subs   x21, x21, #0x1            ; =0x1 
    0x1014e9504 <+6896>: b.ne   0x1014e94f0               ; <+6876>
    0x1014e9508 <+6900>: tbz    w20, #0x0, 0x1014e9514    ; <+6912>
    0x1014e950c <+6904>: mov    x0, x19
    0x1014e9510 <+6908>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9514 <+6912>: ldr    x19, [sp, #0xe8]
    0x1014e9518 <+6916>: str    xzr, [sp, #0xe8]
    0x1014e951c <+6920>: cbz    x19, 0x1014e9538          ; <+6948>
    0x1014e9520 <+6924>: ldrsb  w8, [x19, #0x1f]
    0x1014e9524 <+6928>: tbz    w8, #0x1f, 0x1014e9530    ; <+6940>
    0x1014e9528 <+6932>: ldr    x0, [x19, #0x8]
    0x1014e952c <+6936>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9530 <+6940>: mov    x0, x19
    0x1014e9534 <+6944>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9538 <+6948>: ldr    x0, [sp, #0x528]
    0x1014e953c <+6952>: cbz    x0, 0x1014e954c           ; <+6968>
    0x1014e9540 <+6956>: ldr    x8, [x0]
    0x1014e9544 <+6960>: ldr    x8, [x8, #0x8]
    0x1014e9548 <+6964>: blr    x8
    0x1014e954c <+6968>: ldr    x0, [sp, #0x640]
    0x1014e9550 <+6972>: add    x8, sp, #0x510            ; =0x510 
    0x1014e9554 <+6976>: add    x8, x8, #0x118            ; =0x118 
    0x1014e9558 <+6980>: cmp    x8, x0
    0x1014e955c <+6984>: b.eq   0x1014e9570               ; <+7004>
    0x1014e9560 <+6988>: cbz    x0, 0x1014e957c           ; <+7016>
    0x1014e9564 <+6992>: ldr    x8, [x0]
    0x1014e9568 <+6996>: ldr    x8, [x8, #0x28]
    0x1014e956c <+7000>: b      0x1014e9578               ; <+7012>
    0x1014e9570 <+7004>: ldr    x8, [x0]
    0x1014e9574 <+7008>: ldr    x8, [x8, #0x20]
    0x1014e9578 <+7012>: blr    x8
    0x1014e957c <+7016>: ldr    x0, [sp, #0x620]
    0x1014e9580 <+7020>: add    x8, sp, #0x510            ; =0x510 
    0x1014e9584 <+7024>: add    x8, x8, #0xf8             ; =0xf8 
    0x1014e9588 <+7028>: cmp    x8, x0
    0x1014e958c <+7032>: b.eq   0x1014e95a0               ; <+7052>
    0x1014e9590 <+7036>: cbz    x0, 0x1014e95ac           ; <+7064>
    0x1014e9594 <+7040>: ldr    x8, [x0]
    0x1014e9598 <+7044>: ldr    x8, [x8, #0x28]
    0x1014e959c <+7048>: b      0x1014e95a8               ; <+7060>
    0x1014e95a0 <+7052>: ldr    x8, [x0]
    0x1014e95a4 <+7056>: ldr    x8, [x8, #0x20]
    0x1014e95a8 <+7060>: blr    x8
    0x1014e95ac <+7064>: ldrsb  w8, [sp, #0x587]
    0x1014e95b0 <+7068>: tbnz   w8, #0x1f, 0x1014e961c    ; <+7176>
    0x1014e95b4 <+7072>: ldrb   w8, [sp, #0x648]
    0x1014e95b8 <+7076>: tbnz   w8, #0x0, 0x1014e962c     ; <+7192>
    0x1014e95bc <+7080>: ldrb   w8, [sp, #0x670]
    0x1014e95c0 <+7084>: tbnz   w8, #0x0, 0x1014e963c     ; <+7208>
    0x1014e95c4 <+7088>: ldrb   w8, [sp, #0x698]
    0x1014e95c8 <+7092>: tbnz   w8, #0x0, 0x1014e964c     ; <+7224>
    0x1014e95cc <+7096>: ldrb   w8, [sp, #0x6e0]
    0x1014e95d0 <+7100>: tbnz   w8, #0x0, 0x1014e965c     ; <+7240>
    0x1014e95d4 <+7104>: ldrb   w8, [sp, #0x8f0]
    0x1014e95d8 <+7108>: tbz    w8, #0x0, 0x1014e95e4     ; <+7120>
    0x1014e95dc <+7112>: ldr    x0, [sp, #0x8f8]
    0x1014e95e0 <+7116>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e95e4 <+7120>: ldur   x8, [x29, #-0x68]
    0x1014e95e8 <+7124>: adrp   x9, 9846
    0x1014e95ec <+7128>: ldr    x9, [x9, #0x5a0]
    0x1014e95f0 <+7132>: ldr    x9, [x9]
    0x1014e95f4 <+7136>: cmp    x9, x8
    0x1014e95f8 <+7140>: b.ne   0x1014e9670               ; <+7260>
    0x1014e95fc <+7144>: add    sp, sp, #0xa10            ; =0xa10 
    0x1014e9600 <+7148>: ldp    x29, x30, [sp, #0x50]
    0x1014e9604 <+7152>: ldp    x20, x19, [sp, #0x40]
    0x1014e9608 <+7156>: ldp    x22, x21, [sp, #0x30]
    0x1014e960c <+7160>: ldp    x24, x23, [sp, #0x20]
    0x1014e9610 <+7164>: ldp    x26, x25, [sp, #0x10]
    0x1014e9614 <+7168>: ldp    x28, x27, [sp], #0x60
    0x1014e9618 <+7172>: ret    
    0x1014e961c <+7176>: ldr    x0, [sp, #0x570]
    0x1014e9620 <+7180>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9624 <+7184>: ldrb   w8, [sp, #0x648]
    0x1014e9628 <+7188>: tbz    w8, #0x0, 0x1014e95bc     ; <+7080>
    0x1014e962c <+7192>: ldr    x0, [sp, #0x650]
    0x1014e9630 <+7196>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9634 <+7200>: ldrb   w8, [sp, #0x670]
    0x1014e9638 <+7204>: tbz    w8, #0x0, 0x1014e95c4     ; <+7088>
    0x1014e963c <+7208>: ldr    x0, [sp, #0x678]
    0x1014e9640 <+7212>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9644 <+7216>: ldrb   w8, [sp, #0x698]
    0x1014e9648 <+7220>: tbz    w8, #0x0, 0x1014e95cc     ; <+7096>
    0x1014e964c <+7224>: ldr    x0, [sp, #0x6a0]
    0x1014e9650 <+7228>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9654 <+7232>: ldrb   w8, [sp, #0x6e0]
    0x1014e9658 <+7236>: tbz    w8, #0x0, 0x1014e95d4     ; <+7104>
    0x1014e965c <+7240>: ldr    x0, [sp, #0x6e8]
    0x1014e9660 <+7244>: bl     0x10345ff98               ; symbol stub for: operator delete(void*)
    0x1014e9664 <+7248>: ldrb   w8, [sp, #0x8f0]
    0x1014e9668 <+7252>: tbnz   w8, #0x0, 0x1014e95dc     ; <+7112>
    0x1014e966c <+7256>: b      0x1014e95e4               ; <+7120>
    0x1014e9670 <+7260>: bl     0x1034600d0               ; symbol stub for: __stack_chk_fail
    0x1014e9674 <+7264>: bl     0x1014e657c               ; std::__1::__throw_length_error(char const*)
    0x1014e9678 <+7268>: add    x0, sp, #0x228            ; =0x228 
    0x1014e967c <+7272>: bl     0x10345fa58               ; symbol stub for: std::__1::__basic_string_common<true>::__throw_length_error() const
